{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sajid\\\\Downloads\\\\RecomVis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport GrapherWrapper from \"./GrapherWrapper\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userId, setUserId] = useState(\"\");\n  const [levels, setLevels] = useState(1);\n  const [graphData, setGraphData] = useState({\n    nodes: [],\n    edges: []\n  });\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  // --- Generate mock data for demonstration ---\n  function generateMockRecommendations(userId, levels) {\n    // Simple data structure:\n    // user node -> recommended items (level 1)\n    // recommended items -> similar items (level 2)\n    // If levels > 2, you could keep expanding similarly.\n\n    const nodes = [];\n    const edges = [];\n\n    // Add user node\n    const userNodeId = `user-${userId}`;\n    nodes.push({\n      id: userNodeId,\n      label: `User ${userId}`\n    });\n\n    // Mock recommended products for the user\n    const recommendedProducts = [\"ProdA\", \"ProdB\", \"ProdC\"];\n    recommendedProducts.forEach(prod => {\n      nodes.push({\n        id: prod,\n        label: `${prod} (Recommended)`\n      });\n      edges.push({\n        source: userNodeId,\n        target: prod\n      });\n\n      // If user wants more levels, show \"similar\" expansions\n      if (levels > 1) {\n        // For each recommended product, add 2 \"similar\" items\n        const simItems = [`${prod}-Sim1`, `${prod}-Sim2`];\n        simItems.forEach(sim => {\n          nodes.push({\n            id: sim,\n            label: sim\n          });\n          edges.push({\n            source: prod,\n            target: sim\n          });\n\n          // If levels > 2, you could continue similarly\n          // e.g. recommended complements, or further expansions\n          // in a real scenario, you would fetch from your rec system\n        });\n      }\n    });\n    return {\n      nodes,\n      edges\n    };\n  }\n\n  // --- Form submit handler ---\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (!userId) return;\n\n    // In real code, you'd call your backend or rec logic here:\n    const data = generateMockRecommendations(userId, levels);\n    setGraphData(data);\n    setSelectedNode(null);\n  }\n\n  // --- Called when user clicks a node in GrapherWrapper ---\n  const handleNodeClick = React.useCallback(nodeId => {\n    setSelectedNode(nodeId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interactive Recommendation Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"userId\",\n        children: \"User ID: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"userId\",\n        type: \"text\",\n        value: userId,\n        onChange: e => setUserId(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"levels\",\n        children: \" # of levels: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"levels\",\n        type: \"number\",\n        min: \"1\",\n        value: levels,\n        onChange: e => setLevels(Number(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Generate Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-section\",\n      children: /*#__PURE__*/_jsxDEV(GrapherWrapper, {\n        nodes: graphData.nodes,\n        edges: graphData.edges,\n        onNodeClick: handleNodeClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"detail-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Node Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You clicked on: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: selectedNode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"I4ircQZjRetypTZ/oZD3XmX6jWw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","GrapherWrapper","jsxDEV","_jsxDEV","App","_s","userId","setUserId","levels","setLevels","graphData","setGraphData","nodes","edges","selectedNode","setSelectedNode","generateMockRecommendations","userNodeId","push","id","label","recommendedProducts","forEach","prod","source","target","simItems","sim","handleSubmit","e","preventDefault","data","handleNodeClick","useCallback","nodeId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","value","onChange","required","min","Number","onNodeClick","_c","$RefreshReg$"],"sources":["C:/Users/sajid/Downloads/RecomVis/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport GrapherWrapper from \"./GrapherWrapper\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [userId, setUserId] = useState(\"\");\r\n  const [levels, setLevels] = useState(1);\r\n  const [graphData, setGraphData] = useState({ nodes: [], edges: [] });\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n\r\n  // --- Generate mock data for demonstration ---\r\n  function generateMockRecommendations(userId, levels) {\r\n    // Simple data structure:\r\n    // user node -> recommended items (level 1)\r\n    // recommended items -> similar items (level 2)\r\n    // If levels > 2, you could keep expanding similarly.\r\n\r\n    const nodes = [];\r\n    const edges = [];\r\n\r\n    // Add user node\r\n    const userNodeId = `user-${userId}`;\r\n    nodes.push({ id: userNodeId, label: `User ${userId}` });\r\n\r\n    // Mock recommended products for the user\r\n    const recommendedProducts = [\"ProdA\", \"ProdB\", \"ProdC\"];\r\n    recommendedProducts.forEach((prod) => {\r\n      nodes.push({\r\n        id: prod,\r\n        label: `${prod} (Recommended)`,\r\n      });\r\n      edges.push({\r\n        source: userNodeId,\r\n        target: prod,\r\n      });\r\n\r\n      // If user wants more levels, show \"similar\" expansions\r\n      if (levels > 1) {\r\n        // For each recommended product, add 2 \"similar\" items\r\n        const simItems = [`${prod}-Sim1`, `${prod}-Sim2`];\r\n        simItems.forEach((sim) => {\r\n          nodes.push({\r\n            id: sim,\r\n            label: sim,\r\n          });\r\n          edges.push({\r\n            source: prod,\r\n            target: sim,\r\n          });\r\n\r\n          // If levels > 2, you could continue similarly\r\n          // e.g. recommended complements, or further expansions\r\n          // in a real scenario, you would fetch from your rec system\r\n        });\r\n      }\r\n    });\r\n\r\n    return { nodes, edges };\r\n  }\r\n\r\n  // --- Form submit handler ---\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (!userId) return;\r\n\r\n    // In real code, you'd call your backend or rec logic here:\r\n    const data = generateMockRecommendations(userId, levels);\r\n    setGraphData(data);\r\n    setSelectedNode(null);\r\n  }\r\n\r\n  // --- Called when user clicks a node in GrapherWrapper ---\r\n  const handleNodeClick = React.useCallback((nodeId) => {\r\n    setSelectedNode(nodeId);\r\n  }, []);\r\n  \r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <h1>Interactive Recommendation Graph</h1>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"userId\">User ID: </label>\r\n        <input\r\n          id=\"userId\"\r\n          type=\"text\"\r\n          value={userId}\r\n          onChange={(e) => setUserId(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"levels\"> # of levels: </label>\r\n        <input\r\n          id=\"levels\"\r\n          type=\"number\"\r\n          min=\"1\"\r\n          value={levels}\r\n          onChange={(e) => setLevels(Number(e.target.value))}\r\n        />\r\n\r\n        <button type=\"submit\">Generate Graph</button>\r\n      </form>\r\n\r\n      {/* Graph display */}\r\n      <div className=\"graph-section\">\r\n        <GrapherWrapper\r\n          nodes={graphData.nodes}\r\n          edges={graphData.edges}\r\n          onNodeClick={handleNodeClick}\r\n        />\r\n      </div>\r\n\r\n      {/* Node detail display */}\r\n      {selectedNode && (\r\n        <div className=\"detail-section\">\r\n          <h2>Node Details</h2>\r\n          <p>You clicked on: <strong>{selectedNode}</strong></p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}