{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sajid\\\\Downloads\\\\RecomVis\\\\src\\\\GrapherWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport Graph from \"graphology\";\nimport Sigma from \"sigma\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GrapherWrapper({\n  nodes,\n  edges,\n  onNodeClick\n}) {\n  _s();\n  const containerRef = useRef(null);\n  const sigmaInstanceRef = useRef(null);\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Group nodes by level\n    const nodesByLevel = {};\n    nodes.forEach(node => {\n      const lvl = node.level || 0;\n      if (!nodesByLevel[lvl]) nodesByLevel[lvl] = [];\n      nodesByLevel[lvl].push(node);\n    });\n\n    // Sort levels (0, 1, 2, …)\n    const levelKeys = Object.keys(nodesByLevel).sort((a, b) => a - b);\n\n    // Define default spacings. Adjust these values as needed.\n    const defaultHorizontalSpacing = 100;\n    const spacingByLevel = {\n      0: 0,\n      // User node (centered)\n      1: 500,\n      // Recommended products\n      2: 400 // Similar items\n    };\n    const verticalSpacing = 100; // Define vertical spacing\n\n    // Calculate coordinates for each node based on its level\n    const coords = {};\n    levelKeys.forEach(lvlStr => {\n      const lvl = parseInt(lvlStr, 10);\n      const levelNodes = nodesByLevel[lvl];\n      const count = levelNodes.length;\n      const spacing = spacingByLevel[lvl] || defaultHorizontalSpacing;\n      // Center nodes for this level: starting x position\n      const startX = -((count - 1) / 2) * spacing;\n      levelNodes.forEach((node, index) => {\n        coords[node.id] = {\n          x: startX + index * spacing,\n          y: -lvl * verticalSpacing // Level 0: y=0; level 1: y=-verticalSpacing; etc.\n        };\n      });\n    });\n\n    // Create a new graph\n    const graph = new Graph();\n    nodes.forEach(node => {\n      const {\n        x,\n        y\n      } = coords[node.id];\n      graph.addNode(node.id, {\n        label: node.label,\n        x,\n        y,\n        size: 8\n      });\n    });\n\n    // Add edges\n    edges.forEach((edge, index) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: `Edge ${index}`\n      });\n    });\n\n    // Initialize Sigma with the precomputed layout\n    const renderer = new Sigma(graph, containerRef.current);\n    sigmaInstanceRef.current = renderer;\n\n    // Adjust default zoom (higher ratio means more zoomed out)\n    renderer.getCamera().setState({\n      ratio: 1.7 // Change this value to control zoom level\n    });\n\n    // Listen for node clicks\n    renderer.on(\"clickNode\", e => {\n      if (onNodeClick) onNodeClick(e.node);\n    });\n\n    // Cleanup on unmount or update\n    return () => {\n      renderer.kill();\n      sigmaInstanceRef.current = null;\n    };\n  }, [nodes, edges, onNodeClick]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      width: \"90vw\",\n      // you can adjust this as needed\n      height: \"500px\",\n      border: \"1px solid #ccc\",\n      marginTop: \"1rem\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(GrapherWrapper, \"1d0+tVk9WvKXGa0odUeeTQEXurc=\");\n_c = GrapherWrapper;\nexport default GrapherWrapper;\nvar _c;\n$RefreshReg$(_c, \"GrapherWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","Graph","Sigma","jsxDEV","_jsxDEV","GrapherWrapper","nodes","edges","onNodeClick","_s","containerRef","sigmaInstanceRef","current","nodesByLevel","forEach","node","lvl","level","push","levelKeys","Object","keys","sort","a","b","defaultHorizontalSpacing","spacingByLevel","verticalSpacing","coords","lvlStr","parseInt","levelNodes","count","length","spacing","startX","index","id","x","y","graph","addNode","label","size","edge","addEdge","source","target","renderer","getCamera","setState","ratio","on","e","kill","ref","style","width","height","border","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sajid/Downloads/RecomVis/src/GrapherWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport Graph from \"graphology\";\r\nimport Sigma from \"sigma\";\r\n\r\nfunction GrapherWrapper({ nodes, edges, onNodeClick }) {\r\n  const containerRef = useRef(null);\r\n  const sigmaInstanceRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!containerRef.current) return;\r\n\r\n    // Group nodes by level\r\n    const nodesByLevel = {};\r\n    nodes.forEach((node) => {\r\n      const lvl = node.level || 0;\r\n      if (!nodesByLevel[lvl]) nodesByLevel[lvl] = [];\r\n      nodesByLevel[lvl].push(node);\r\n    });\r\n\r\n    // Sort levels (0, 1, 2, …)\r\n    const levelKeys = Object.keys(nodesByLevel).sort((a, b) => a - b);\r\n\r\n    // Define default spacings. Adjust these values as needed.\r\n    const defaultHorizontalSpacing = 100;\r\n    const spacingByLevel = {\r\n      0: 0,    // User node (centered)\r\n      1: 500,  // Recommended products\r\n      2: 400  // Similar items\r\n    };\r\n\r\n    const verticalSpacing = 100; // Define vertical spacing\r\n\r\n    // Calculate coordinates for each node based on its level\r\n    const coords = {};\r\n    levelKeys.forEach((lvlStr) => {\r\n      const lvl = parseInt(lvlStr, 10);\r\n      const levelNodes = nodesByLevel[lvl];\r\n      const count = levelNodes.length;\r\n      const spacing = spacingByLevel[lvl] || defaultHorizontalSpacing;\r\n      // Center nodes for this level: starting x position\r\n      const startX = -((count - 1) / 2) * spacing;\r\n      levelNodes.forEach((node, index) => {\r\n        coords[node.id] = {\r\n          x: startX + index * spacing,\r\n          y: -lvl * verticalSpacing, // Level 0: y=0; level 1: y=-verticalSpacing; etc.\r\n        };\r\n      });\r\n    });\r\n\r\n    // Create a new graph\r\n    const graph = new Graph();\r\n    nodes.forEach((node) => {\r\n      const { x, y } = coords[node.id];\r\n      graph.addNode(node.id, {\r\n        label: node.label,\r\n        x,\r\n        y,\r\n        size: 8,\r\n      });\r\n    });\r\n\r\n    // Add edges\r\n    edges.forEach((edge, index) => {\r\n      graph.addEdge(edge.source, edge.target, {\r\n        label: `Edge ${index}`,\r\n      });\r\n    });\r\n\r\n    // Initialize Sigma with the precomputed layout\r\n    const renderer = new Sigma(graph, containerRef.current);\r\n    sigmaInstanceRef.current = renderer;\r\n\r\n    // Adjust default zoom (higher ratio means more zoomed out)\r\n    renderer.getCamera().setState({\r\n      ratio: 1.7, // Change this value to control zoom level\r\n    });\r\n\r\n    // Listen for node clicks\r\n    renderer.on(\"clickNode\", (e) => {\r\n      if (onNodeClick) onNodeClick(e.node);\r\n    });\r\n\r\n    // Cleanup on unmount or update\r\n    return () => {\r\n      renderer.kill();\r\n      sigmaInstanceRef.current = null;\r\n    };\r\n  }, [nodes, edges, onNodeClick]);\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      style={{\r\n        width: \"90vw\", // you can adjust this as needed\r\n        height: \"500px\",\r\n        border: \"1px solid #ccc\",\r\n        marginTop: \"1rem\",\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default GrapherWrapper;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}