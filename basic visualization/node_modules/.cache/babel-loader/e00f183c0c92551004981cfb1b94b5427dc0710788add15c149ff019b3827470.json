{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sajid\\\\Downloads\\\\RecomVis\\\\src\\\\GrapherWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Graph from \"graphology\";\nimport Sigma from \"sigma\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GrapherWrapper({\n  nodes,\n  edges,\n  onNodeClick\n}) {\n  _s();\n  const containerRef = useRef(null);\n  const sigmaInstanceRef = useRef(null);\n  const [zoomRatio, setZoomRatio] = useState(2); // initial zoom ratio\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Group nodes by level\n    const nodesByLevel = {};\n    nodes.forEach(node => {\n      const lvl = node.level || 0;\n      if (!nodesByLevel[lvl]) nodesByLevel[lvl] = [];\n      nodesByLevel[lvl].push(node);\n    });\n\n    // Sort levels (0, 1, 2, …)\n    const levelKeys = Object.keys(nodesByLevel).sort((a, b) => a - b);\n\n    // Define default spacings. Adjust these values as needed.\n    const defaultHorizontalSpacing = 100;\n    const spacingByLevel = {\n      0: 0,\n      // User node (centered)\n      1: 300,\n      // Recommended products\n      2: 200 // Similar items\n    };\n    const verticalSpacing = 100; // Define vertical spacing\n\n    // Calculate coordinates for each node based on its level\n    const coords = {};\n    levelKeys.forEach(lvlStr => {\n      const lvl = parseInt(lvlStr, 10);\n      const levelNodes = nodesByLevel[lvl];\n      const count = levelNodes.length;\n      const spacing = spacingByLevel[lvl] || defaultHorizontalSpacing;\n      // Center nodes for this level: starting x position\n      const startX = -((count - 1) / 2) * spacing;\n      levelNodes.forEach((node, index) => {\n        coords[node.id] = {\n          x: startX + index * spacing,\n          y: -lvl * verticalSpacing // Level 0: y=0; level 1: y=-verticalSpacing; etc.\n        };\n      });\n    });\n\n    // Create a new graph\n    const graph = new Graph();\n    nodes.forEach(node => {\n      const {\n        x,\n        y\n      } = coords[node.id];\n      graph.addNode(node.id, {\n        label: node.label,\n        x,\n        y,\n        size: 8\n      });\n    });\n\n    // Add edges\n    edges.forEach((edge, index) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: `Edge ${index}`\n      });\n    });\n\n    // Initialize Sigma with the precomputed layout\n    const renderer = new Sigma(graph, containerRef.current);\n    sigmaInstanceRef.current = renderer;\n\n    // Adjust default zoom (a higher ratio means more zoomed out)\n    const camera = renderer.getCamera();\n    camera.setState({\n      ratio: 2\n    });\n    // Set initial zoom ratio in state\n    setZoomRatio(camera.getState().ratio);\n\n    // Update the zoom ratio whenever the camera state changes.\n    // The \"updated\" event is fired when the camera is changed (e.g. via zoom/pan)\n    const updateZoom = () => setZoomRatio(camera.getState().ratio);\n    camera.on(\"updated\", updateZoom);\n\n    // Listen for node clicks\n    renderer.on(\"clickNode\", e => {\n      if (onNodeClick) onNodeClick(e.node);\n    });\n\n    // Cleanup on unmount or update\n    return () => {\n      camera.off(\"updated\", updateZoom);\n      renderer.kill();\n      sigmaInstanceRef.current = null;\n    };\n  }, [nodes, edges, onNodeClick]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      style: {\n        width: \"150vw\",\n        // adjust width as needed\n        height: \"500px\",\n        border: \"1px solid #ccc\",\n        marginTop: \"1rem\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"1rem\",\n        marginLeft: \"1rem\",\n        minWidth: \"120px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Zoom Ratio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: zoomRatio.toFixed(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(GrapherWrapper, \"X6MBhDiSEY3EDm8NHp0wuXPwHZY=\");\n_c = GrapherWrapper;\nexport default GrapherWrapper;\nvar _c;\n$RefreshReg$(_c, \"GrapherWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Graph","Sigma","jsxDEV","_jsxDEV","GrapherWrapper","nodes","edges","onNodeClick","_s","containerRef","sigmaInstanceRef","zoomRatio","setZoomRatio","current","nodesByLevel","forEach","node","lvl","level","push","levelKeys","Object","keys","sort","a","b","defaultHorizontalSpacing","spacingByLevel","verticalSpacing","coords","lvlStr","parseInt","levelNodes","count","length","spacing","startX","index","id","x","y","graph","addNode","label","size","edge","addEdge","source","target","renderer","camera","getCamera","setState","ratio","getState","updateZoom","on","e","off","kill","style","display","children","ref","width","height","border","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","padding","marginLeft","minWidth","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/sajid/Downloads/RecomVis/src/GrapherWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport Graph from \"graphology\";\r\nimport Sigma from \"sigma\";\r\n\r\nfunction GrapherWrapper({ nodes, edges, onNodeClick }) {\r\n  const containerRef = useRef(null);\r\n  const sigmaInstanceRef = useRef(null);\r\n  const [zoomRatio, setZoomRatio] = useState(2); // initial zoom ratio\r\n\r\n  useEffect(() => {\r\n    if (!containerRef.current) return;\r\n\r\n    // Group nodes by level\r\n    const nodesByLevel = {};\r\n    nodes.forEach((node) => {\r\n      const lvl = node.level || 0;\r\n      if (!nodesByLevel[lvl]) nodesByLevel[lvl] = [];\r\n      nodesByLevel[lvl].push(node);\r\n    });\r\n\r\n    // Sort levels (0, 1, 2, …)\r\n    const levelKeys = Object.keys(nodesByLevel).sort((a, b) => a - b);\r\n\r\n    // Define default spacings. Adjust these values as needed.\r\n    const defaultHorizontalSpacing = 100;\r\n    const spacingByLevel = {\r\n      0: 0,    // User node (centered)\r\n      1: 300,  // Recommended products\r\n      2: 200,  // Similar items\r\n    };\r\n\r\n    const verticalSpacing = 100; // Define vertical spacing\r\n\r\n    // Calculate coordinates for each node based on its level\r\n    const coords = {};\r\n    levelKeys.forEach((lvlStr) => {\r\n      const lvl = parseInt(lvlStr, 10);\r\n      const levelNodes = nodesByLevel[lvl];\r\n      const count = levelNodes.length;\r\n      const spacing = spacingByLevel[lvl] || defaultHorizontalSpacing;\r\n      // Center nodes for this level: starting x position\r\n      const startX = -((count - 1) / 2) * spacing;\r\n      levelNodes.forEach((node, index) => {\r\n        coords[node.id] = {\r\n          x: startX + index * spacing,\r\n          y: -lvl * verticalSpacing, // Level 0: y=0; level 1: y=-verticalSpacing; etc.\r\n        };\r\n      });\r\n    });\r\n\r\n    // Create a new graph\r\n    const graph = new Graph();\r\n    nodes.forEach((node) => {\r\n      const { x, y } = coords[node.id];\r\n      graph.addNode(node.id, {\r\n        label: node.label,\r\n        x,\r\n        y,\r\n        size: 8,\r\n      });\r\n    });\r\n\r\n    // Add edges\r\n    edges.forEach((edge, index) => {\r\n      graph.addEdge(edge.source, edge.target, {\r\n        label: `Edge ${index}`,\r\n      });\r\n    });\r\n\r\n    // Initialize Sigma with the precomputed layout\r\n    const renderer = new Sigma(graph, containerRef.current);\r\n    sigmaInstanceRef.current = renderer;\r\n\r\n    // Adjust default zoom (a higher ratio means more zoomed out)\r\n    const camera = renderer.getCamera();\r\n    camera.setState({\r\n      ratio: 2,\r\n    });\r\n    // Set initial zoom ratio in state\r\n    setZoomRatio(camera.getState().ratio);\r\n\r\n    // Update the zoom ratio whenever the camera state changes.\r\n    // The \"updated\" event is fired when the camera is changed (e.g. via zoom/pan)\r\n    const updateZoom = () => setZoomRatio(camera.getState().ratio);\r\n    camera.on(\"updated\", updateZoom);\r\n\r\n    // Listen for node clicks\r\n    renderer.on(\"clickNode\", (e) => {\r\n      if (onNodeClick) onNodeClick(e.node);\r\n    });\r\n\r\n    // Cleanup on unmount or update\r\n    return () => {\r\n      camera.off(\"updated\", updateZoom);\r\n      renderer.kill();\r\n      sigmaInstanceRef.current = null;\r\n    };\r\n  }, [nodes, edges, onNodeClick]);\r\n\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <div\r\n        ref={containerRef}\r\n        style={{\r\n          width: \"150vw\", // adjust width as needed\r\n          height: \"500px\",\r\n          border: \"1px solid #ccc\",\r\n          marginTop: \"1rem\",\r\n        }}\r\n      />\r\n      <div style={{ padding: \"1rem\", marginLeft: \"1rem\", minWidth: \"120px\" }}>\r\n        <h3>Zoom Ratio</h3>\r\n        <p>{zoomRatio.toFixed(2)}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GrapherWrapper;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}