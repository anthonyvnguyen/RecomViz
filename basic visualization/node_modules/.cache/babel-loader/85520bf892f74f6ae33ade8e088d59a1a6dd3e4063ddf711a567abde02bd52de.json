{"ast":null,"code":"var _jsxFileName = \"/Users/rohit/College/Spring2025/CSE6242/RecomViz/basic visualization/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport GrapherWrapper from \"./GrapherWrapper\";\nimport \"./App.css\";\n\n// Simulating backend recommendation logic\n// These are placeholders for actual methods from the notebook\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getRecommendationsSVD = (userId, methodData, topN = 10) => {\n  const userLatent = methodData.userLatent;\n  const itemLatent = methodData.itemLatent;\n  const userBias = methodData.userBias;\n  const itemBias = methodData.itemBias;\n  const globalMean = methodData.globalMean;\n\n  // Get the user's index and compute predicted residuals\n  const userIndex = methodData.userToIdx[userId];\n  const predictedResiduals = userLatent[userIndex].map((uLatent, i) => {\n    return uLatent * itemLatent[i];\n  });\n  const userB = userBias.get(userId, 0.0);\n  const recommendations = methodData.productIds.map((productId, idx) => {\n    const itemB = itemBias.get(productId, 0.0);\n    const predictedRating = globalMean + userB + itemB + predictedResiduals[idx];\n    return {\n      productId,\n      predictedRating\n    };\n  });\n\n  // Remove products the user already rated\n  const ratedProducts = methodData.ratings[userId];\n  const filteredRecommendations = recommendations.filter(rec => !ratedProducts.includes(rec.productId));\n  return filteredRecommendations.sort((a, b) => b.predictedRating - a.predictedRating).slice(0, topN);\n};\nconst getRecommendationsSlopeOne = (userId, methodData, topN = 10) => {\n  const diffMatrix = methodData.diffMatrix;\n  const freqMatrix = methodData.freqMatrix;\n  const ratings = methodData.ratings;\n  let predictions = [];\n  const ratedProducts = ratings[userId];\n  methodData.productIds.forEach(prodId => {\n    if (ratedProducts.includes(prodId)) return;\n    let numerator = 0;\n    let denominator = 0;\n    ratings[userId].forEach(otherProduct => {\n      if (freqMatrix[otherProduct] && freqMatrix[otherProduct][prodId] > 0) {\n        const weight = freqMatrix[otherProduct][prodId];\n        numerator += (diffMatrix[otherProduct][prodId] + ratings[userId][otherProduct]) * weight;\n        denominator += weight;\n      }\n    });\n    if (denominator > 0) {\n      const predRating = numerator / denominator;\n      predictions.push({\n        productId: prodId,\n        predictedRating: predRating\n      });\n    } else {\n      predictions.push({\n        productId: prodId,\n        predictedRating: methodData.globalMean\n      });\n    }\n  });\n  return predictions.sort((a, b) => b.predictedRating - a.predictedRating).slice(0, topN);\n};\nconst getRecommendationsCombined = (userId, methodData, topN = 10, alpha = 0.5) => {\n  const svdRecs = getRecommendationsSVD(userId, methodData, topN);\n  const slopeOneRecs = getRecommendationsSlopeOne(userId, methodData, topN);\n\n  // Combine the recommendations using a weighted average (alpha = 0.5 by default)\n  const combinedRecs = [];\n  svdRecs.forEach(svdRec => {\n    const slopeOneRec = slopeOneRecs.find(rec => rec.productId === svdRec.productId);\n    if (slopeOneRec) {\n      const combinedRating = alpha * svdRec.predictedRating + (1 - alpha) * slopeOneRec.predictedRating;\n      combinedRecs.push({\n        productId: svdRec.productId,\n        predictedRating: combinedRating\n      });\n    }\n  });\n  return combinedRecs.sort((a, b) => b.predictedRating - a.predictedRating).slice(0, topN);\n};\nfunction App() {\n  _s();\n  const [userId, setUserId] = useState(\"\"); // User input\n  const [levels, setLevels] = useState(1); // Number of recommendation levels\n  const [method, setMethod] = useState(\"combined\"); // Selected recommendation method\n  const [graphData, setGraphData] = useState({\n    nodes: [],\n    edges: []\n  });\n  const [csvData, setCsvData] = useState(null); // Holds the loaded CSV data\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [loadingTime, setLoadingTime] = useState(null); // Time to load recommendations\n\n  // Fetch CSV data on component mount\n  useEffect(() => {\n    // Load CSV file (assuming it's in the 'public' directory)\n    fetch(\"/data.csv\").then(response => response.text()).then(text => {\n      Papa.parse(text, {\n        complete: result => {\n          // Process CSV data here\n          const methodData = processCsvData(result.data);\n          setCsvData(methodData);\n        },\n        header: true\n      });\n    });\n  }, []);\n  const processCsvData = data => {\n    // Process your CSV data to create recommendations (e.g., SVD, Slope One)\n    let methodData = {\n      svdRecommendations: {},\n      slopeOneRecommendations: {},\n      combinedRecommendations: {},\n      userLatent: [],\n      itemLatent: [],\n      userBias: new Map(),\n      itemBias: new Map(),\n      globalMean: 0,\n      ratings: {},\n      userToIdx: {},\n      productIds: [],\n      diffMatrix: {},\n      freqMatrix: {}\n    };\n\n    // Process data to build up the model\n    data.forEach(row => {\n      const userId = row.user_id;\n      const productId = row.product_id;\n      const rating = parseFloat(row.rating);\n\n      // Add rating to user-based ratings data\n      if (!methodData.ratings[userId]) {\n        methodData.ratings[userId] = {};\n      }\n      methodData.ratings[userId][productId] = rating;\n\n      // Add product IDs to the list\n      if (!methodData.productIds.includes(productId)) {\n        methodData.productIds.push(productId);\n      }\n\n      // Process other needed data for SVD and Slope One\n      // (For brevity, this is simplified; you would implement actual logic for computing biases, latent factors, diff matrix, etc.)\n    });\n\n    // Assume you compute all necessary components like latent factors, biases, diff matrices, etc. here\n\n    return methodData;\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!userId || !csvData) return;\n    const start = Date.now();\n    let recommendations = [];\n    switch (method) {\n      case \"svd\":\n        recommendations = getRecommendationsSVD(userId, csvData);\n        break;\n      case \"slopeone\":\n        recommendations = getRecommendationsSlopeOne(userId, csvData);\n        break;\n      case \"combined\":\n        recommendations = getRecommendationsCombined(userId, csvData);\n        break;\n      default:\n        break;\n    }\n    const end = Date.now();\n    setLoadingTime(end - start);\n\n    // Here you would generate graph data from recommendations (mocked for now)\n    const graphData = generateGraphData(recommendations);\n    setGraphData(graphData);\n  };\n  const generateGraphData = recommendations => {\n    let nodes = [{\n      id: `user-${userId}`,\n      label: `User ${userId}`,\n      level: 0\n    }];\n    let edges = [];\n    recommendations.forEach(rec => {\n      nodes.push({\n        id: rec.productId,\n        label: `${rec.productId} (Rec)`,\n        level: 1\n      });\n      edges.push({\n        source: `user-${userId}`,\n        target: rec.productId\n      });\n    });\n    return {\n      nodes,\n      edges\n    };\n  };\n  const handleNodeClick = React.useCallback(nodeId => {\n    setSelectedNode(nodeId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interactive Recommendation Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"User ID: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userId,\n        onChange: e => setUserId(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"# of levels: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: \"1\",\n        value: levels,\n        onChange: e => setLevels(Number(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Method: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: method,\n        onChange: e => setMethod(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"svd\",\n          children: \"SVD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"slopeone\",\n          children: \"Slope One\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"combined\",\n          children: \"Combined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Generate Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), loadingTime !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-time\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Time taken: \", loadingTime, \"ms\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-section\",\n      children: /*#__PURE__*/_jsxDEV(GrapherWrapper, {\n        nodes: graphData.nodes,\n        edges: graphData.edges,\n        onNodeClick: handleNodeClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"detail-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Node Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You clicked on: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: selectedNode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"IHQubHMzPM2Vzx1iSOLniG5q9UY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Papa","GrapherWrapper","jsxDEV","_jsxDEV","getRecommendationsSVD","userId","methodData","topN","userLatent","itemLatent","userBias","itemBias","globalMean","userIndex","userToIdx","predictedResiduals","map","uLatent","i","userB","get","recommendations","productIds","productId","idx","itemB","predictedRating","ratedProducts","ratings","filteredRecommendations","filter","rec","includes","sort","a","b","slice","getRecommendationsSlopeOne","diffMatrix","freqMatrix","predictions","forEach","prodId","numerator","denominator","otherProduct","weight","predRating","push","getRecommendationsCombined","alpha","svdRecs","slopeOneRecs","combinedRecs","svdRec","slopeOneRec","find","combinedRating","App","_s","setUserId","levels","setLevels","method","setMethod","graphData","setGraphData","nodes","edges","csvData","setCsvData","selectedNode","setSelectedNode","loadingTime","setLoadingTime","fetch","then","response","text","parse","complete","result","processCsvData","data","header","svdRecommendations","slopeOneRecommendations","combinedRecommendations","Map","row","user_id","product_id","rating","parseFloat","handleSubmit","e","preventDefault","start","Date","now","end","generateGraphData","id","label","level","source","target","handleNodeClick","useCallback","nodeId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","required","min","Number","onNodeClick","_c","$RefreshReg$"],"sources":["/Users/rohit/College/Spring2025/CSE6242/RecomViz/basic visualization/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport GrapherWrapper from \"./GrapherWrapper\";\nimport \"./App.css\";\n\n// Simulating backend recommendation logic\n// These are placeholders for actual methods from the notebook\nconst getRecommendationsSVD = (userId, methodData, topN = 10) => {\n  const userLatent = methodData.userLatent;\n  const itemLatent = methodData.itemLatent;\n  const userBias = methodData.userBias;\n  const itemBias = methodData.itemBias;\n  const globalMean = methodData.globalMean;\n\n  // Get the user's index and compute predicted residuals\n  const userIndex = methodData.userToIdx[userId];\n  const predictedResiduals = userLatent[userIndex].map((uLatent, i) => {\n    return uLatent * itemLatent[i];\n  });\n  \n  const userB = userBias.get(userId, 0.0);\n  const recommendations = methodData.productIds.map((productId, idx) => {\n    const itemB = itemBias.get(productId, 0.0);\n    const predictedRating = globalMean + userB + itemB + predictedResiduals[idx];\n    return { productId, predictedRating };\n  });\n\n  // Remove products the user already rated\n  const ratedProducts = methodData.ratings[userId];\n  const filteredRecommendations = recommendations.filter(\n    (rec) => !ratedProducts.includes(rec.productId)\n  );\n\n  return filteredRecommendations.sort((a, b) => b.predictedRating - a.predictedRating).slice(0, topN);\n};\n\nconst getRecommendationsSlopeOne = (userId, methodData, topN = 10) => {\n  const diffMatrix = methodData.diffMatrix;\n  const freqMatrix = methodData.freqMatrix;\n  const ratings = methodData.ratings;\n\n  let predictions = [];\n\n  const ratedProducts = ratings[userId];\n  methodData.productIds.forEach((prodId) => {\n    if (ratedProducts.includes(prodId)) return;\n    let numerator = 0;\n    let denominator = 0;\n    \n    ratings[userId].forEach((otherProduct) => {\n      if (freqMatrix[otherProduct] && freqMatrix[otherProduct][prodId] > 0) {\n        const weight = freqMatrix[otherProduct][prodId];\n        numerator += (diffMatrix[otherProduct][prodId] + ratings[userId][otherProduct]) * weight;\n        denominator += weight;\n      }\n    });\n    \n    if (denominator > 0) {\n      const predRating = numerator / denominator;\n      predictions.push({ productId: prodId, predictedRating: predRating });\n    } else {\n      predictions.push({ productId: prodId, predictedRating: methodData.globalMean });\n    }\n  });\n\n  return predictions.sort((a, b) => b.predictedRating - a.predictedRating).slice(0, topN);\n};\n\nconst getRecommendationsCombined = (userId, methodData, topN = 10, alpha = 0.5) => {\n  const svdRecs = getRecommendationsSVD(userId, methodData, topN);\n  const slopeOneRecs = getRecommendationsSlopeOne(userId, methodData, topN);\n  \n  // Combine the recommendations using a weighted average (alpha = 0.5 by default)\n  const combinedRecs = [];\n  svdRecs.forEach((svdRec) => {\n    const slopeOneRec = slopeOneRecs.find((rec) => rec.productId === svdRec.productId);\n    if (slopeOneRec) {\n      const combinedRating = alpha * svdRec.predictedRating + (1 - alpha) * slopeOneRec.predictedRating;\n      combinedRecs.push({ productId: svdRec.productId, predictedRating: combinedRating });\n    }\n  });\n\n  return combinedRecs.sort((a, b) => b.predictedRating - a.predictedRating).slice(0, topN);\n};\n\nfunction App() {\n  const [userId, setUserId] = useState(\"\"); // User input\n  const [levels, setLevels] = useState(1); // Number of recommendation levels\n  const [method, setMethod] = useState(\"combined\"); // Selected recommendation method\n  const [graphData, setGraphData] = useState({ nodes: [], edges: [] });\n  const [csvData, setCsvData] = useState(null); // Holds the loaded CSV data\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [loadingTime, setLoadingTime] = useState(null); // Time to load recommendations\n\n  // Fetch CSV data on component mount\n  useEffect(() => {\n    // Load CSV file (assuming it's in the 'public' directory)\n    fetch(\"/data.csv\")\n      .then((response) => response.text())\n      .then((text) => {\n        Papa.parse(text, {\n          complete: (result) => {\n            // Process CSV data here\n            const methodData = processCsvData(result.data);\n            setCsvData(methodData);\n          },\n          header: true,\n        });\n      });\n  }, []);\n\n  const processCsvData = (data) => {\n    // Process your CSV data to create recommendations (e.g., SVD, Slope One)\n    let methodData = {\n      svdRecommendations: {},\n      slopeOneRecommendations: {},\n      combinedRecommendations: {},\n      userLatent: [],\n      itemLatent: [],\n      userBias: new Map(),\n      itemBias: new Map(),\n      globalMean: 0,\n      ratings: {},\n      userToIdx: {},\n      productIds: [],\n      diffMatrix: {},\n      freqMatrix: {},\n    };\n\n    // Process data to build up the model\n    data.forEach((row) => {\n      const userId = row.user_id;\n      const productId = row.product_id;\n      const rating = parseFloat(row.rating);\n\n      // Add rating to user-based ratings data\n      if (!methodData.ratings[userId]) {\n        methodData.ratings[userId] = {};\n      }\n      methodData.ratings[userId][productId] = rating;\n\n      // Add product IDs to the list\n      if (!methodData.productIds.includes(productId)) {\n        methodData.productIds.push(productId);\n      }\n\n      // Process other needed data for SVD and Slope One\n      // (For brevity, this is simplified; you would implement actual logic for computing biases, latent factors, diff matrix, etc.)\n    });\n\n    // Assume you compute all necessary components like latent factors, biases, diff matrices, etc. here\n\n    return methodData;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!userId || !csvData) return;\n\n    const start = Date.now();\n\n    let recommendations = [];\n    switch (method) {\n      case \"svd\":\n        recommendations = getRecommendationsSVD(userId, csvData);\n        break;\n      case \"slopeone\":\n        recommendations = getRecommendationsSlopeOne(userId, csvData);\n        break;\n      case \"combined\":\n        recommendations = getRecommendationsCombined(userId, csvData);\n        break;\n      default:\n        break;\n    }\n\n    const end = Date.now();\n    setLoadingTime(end - start);\n\n    // Here you would generate graph data from recommendations (mocked for now)\n    const graphData = generateGraphData(recommendations);\n    setGraphData(graphData);\n  };\n\n  const generateGraphData = (recommendations) => {\n    let nodes = [{ id: `user-${userId}`, label: `User ${userId}`, level: 0 }];\n    let edges = [];\n    recommendations.forEach((rec) => {\n      nodes.push({ id: rec.productId, label: `${rec.productId} (Rec)`, level: 1 });\n      edges.push({ source: `user-${userId}`, target: rec.productId });\n    });\n\n    return { nodes, edges };\n  };\n\n  const handleNodeClick = React.useCallback((nodeId) => {\n    setSelectedNode(nodeId);\n  }, []);\n\n  return (\n    <div className=\"app-container\">\n      <h1>Interactive Recommendation Graph</h1>\n\n      <form onSubmit={handleSubmit}>\n        <label>User ID: </label>\n        <input\n          type=\"text\"\n          value={userId}\n          onChange={(e) => setUserId(e.target.value)}\n          required\n        />\n\n        <label># of levels: </label>\n        <input\n          type=\"number\"\n          min=\"1\"\n          value={levels}\n          onChange={(e) => setLevels(Number(e.target.value))}\n        />\n\n        <label>Method: </label>\n        <select value={method} onChange={(e) => setMethod(e.target.value)}>\n          <option value=\"svd\">SVD</option>\n          <option value=\"slopeone\">Slope One</option>\n          <option value=\"combined\">Combined</option>\n        </select>\n\n        <button type=\"submit\">Generate Graph</button>\n      </form>\n\n      {/* Displaying the loading time */}\n      {loadingTime !== null && (\n        <div className=\"loading-time\">\n          <h2>Time taken: {loadingTime}ms</h2>\n        </div>\n      )}\n\n      {/* Graph display */}\n      <div className=\"graph-section\">\n        <GrapherWrapper\n          nodes={graphData.nodes}\n          edges={graphData.edges}\n          onNodeClick={handleNodeClick}\n        />\n      </div>\n\n      {/* Node detail display */}\n      {selectedNode && (\n        <div className=\"detail-section\">\n          <h2>Node Details</h2>\n          <p>You clicked on: <strong>{selectedNode}</strong></p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}