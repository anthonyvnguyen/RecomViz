{"ast":null,"code":"var _jsxFileName = \"/Users/rohit/College/Spring2025/CSE6242/RecomViz/basic visualization/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\"; // Add this import\nimport GrapherWrapper from \"./GrapherWrapper\";\nimport \"./App.css\";\n\n// Helper function to load CSV data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst loadCSVData = csvFilePath => {\n  return new Promise((resolve, reject) => {\n    Papa.parse(csvFilePath, {\n      download: true,\n      complete: result => {\n        resolve(result.data);\n      },\n      error: error => reject(error)\n    });\n  });\n};\nfunction App() {\n  _s();\n  const [userId, setUserId] = useState(\"\");\n  const [levels, setLevels] = useState(1);\n  const [graphData, setGraphData] = useState({\n    nodes: [],\n    edges: []\n  });\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [ratingsData, setRatingsData] = useState([]);\n  const [userBias, setUserBias] = useState({});\n  const [itemBias, setItemBias] = useState({});\n  const [globalMean, setGlobalMean] = useState(0);\n  useEffect(() => {\n    // Load CSV when the component mounts\n    loadCSVData(\"sample_user_ratings.csv\").then(data => {\n      setRatingsData(data);\n      // Process CSV data\n      processRatingsData(data);\n    }).catch(error => console.error(\"Error loading CSV:\", error));\n  }, []);\n  const processRatingsData = data => {\n    const ratingsDf = data;\n    const userIds = [...new Set(ratingsDf.map(row => row.user_id))];\n    const productIds = [...new Set(ratingsDf.map(row => row.product_id))];\n    const userToIdx = Object.fromEntries(userIds.map((user, i) => [user, i]));\n    const productToIdx = Object.fromEntries(productIds.map((prod, i) => [prod, i]));\n\n    // Compute Global Mean, Biases, and Residual Matrix\n    const globalMean = ratingsDf.reduce((acc, row) => acc + parseFloat(row.rating), 0) / ratingsDf.length;\n    setGlobalMean(globalMean);\n    const userBias = ratingsDf.reduce((acc, row) => {\n      acc[row.user_id] = acc[row.user_id] || 0;\n      acc[row.user_id] += parseFloat(row.rating);\n      return acc;\n    }, {});\n    setUserBias(userBias);\n    const itemBias = {}; // Compute item biases (similar to userBias logic)\n\n    // Compute user-item matrix\n    const userItemSparse = [];\n    ratingsDf.forEach(row => {\n      const userIdx = userToIdx[row.user_id];\n      const productIdx = productToIdx[row.product_id];\n      userItemSparse.push({\n        userIdx,\n        productIdx,\n        ratingResidual: parseFloat(row.rating) - globalMean // example residual\n      });\n    });\n\n    // SVD logic here (simplified for brevity)\n    const svd = new SomeSVDImplementation(); // You'll need to add your actual SVD logic here.\n  };\n\n  // Your recommendation logic can be called in the form submit handler as before\n\n  function generateMockRecommendations(userId, levels) {\n    const nodes = [];\n    const edges = [];\n    const userNodeId = `user-${userId}`;\n    nodes.push({\n      id: userNodeId,\n      label: `User ${userId}`,\n      level: 0\n    });\n    const recommendedProducts = [\"ProdA\", \"ProdB\", \"ProdC\"];\n    recommendedProducts.forEach(prod => {\n      nodes.push({\n        id: prod,\n        label: `${prod} (Recommended)`,\n        level: 1\n      });\n      edges.push({\n        source: userNodeId,\n        target: prod\n      });\n      if (levels > 1) {\n        const simItems = [`${prod}-Sim1`, `${prod}-Sim2`];\n        simItems.forEach(sim => {\n          nodes.push({\n            id: sim,\n            label: sim,\n            level: 2\n          });\n          edges.push({\n            source: prod,\n            target: sim\n          });\n        });\n      }\n    });\n    return {\n      nodes,\n      edges\n    };\n  }\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (!userId) return;\n    const data = generateMockRecommendations(userId, levels);\n    setGraphData(data);\n    setSelectedNode(null);\n  }\n  const handleNodeClick = React.useCallback(nodeId => {\n    setSelectedNode(nodeId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interactive Recommendation Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"userId\",\n        children: \"User ID: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"userId\",\n        type: \"text\",\n        value: userId,\n        onChange: e => setUserId(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"levels\",\n        children: \" # of levels: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"levels\",\n        type: \"number\",\n        min: \"1\",\n        value: levels,\n        onChange: e => setLevels(Number(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Generate Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-section\",\n      children: /*#__PURE__*/_jsxDEV(GrapherWrapper, {\n        nodes: graphData.nodes,\n        edges: graphData.edges,\n        onNodeClick: handleNodeClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"detail-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Node Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You clicked on: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: selectedNode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UE1fJNTmfNAOhEUwEgQF3w25fpM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Papa","GrapherWrapper","jsxDEV","_jsxDEV","loadCSVData","csvFilePath","Promise","resolve","reject","parse","download","complete","result","data","error","App","_s","userId","setUserId","levels","setLevels","graphData","setGraphData","nodes","edges","selectedNode","setSelectedNode","ratingsData","setRatingsData","userBias","setUserBias","itemBias","setItemBias","globalMean","setGlobalMean","then","processRatingsData","catch","console","ratingsDf","userIds","Set","map","row","user_id","productIds","product_id","userToIdx","Object","fromEntries","user","i","productToIdx","prod","reduce","acc","parseFloat","rating","length","userItemSparse","forEach","userIdx","productIdx","push","ratingResidual","svd","SomeSVDImplementation","generateMockRecommendations","userNodeId","id","label","level","recommendedProducts","source","target","simItems","sim","handleSubmit","e","preventDefault","handleNodeClick","useCallback","nodeId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","value","onChange","required","min","Number","onNodeClick","_c","$RefreshReg$"],"sources":["/Users/rohit/College/Spring2025/CSE6242/RecomViz/basic visualization/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\"; // Add this import\nimport GrapherWrapper from \"./GrapherWrapper\";\nimport \"./App.css\";\n\n// Helper function to load CSV data\nconst loadCSVData = (csvFilePath) => {\n  return new Promise((resolve, reject) => {\n    Papa.parse(csvFilePath, {\n      download: true,\n      complete: (result) => {\n        resolve(result.data);\n      },\n      error: (error) => reject(error),\n    });\n  });\n};\n\nfunction App() {\n  const [userId, setUserId] = useState(\"\");\n  const [levels, setLevels] = useState(1);\n  const [graphData, setGraphData] = useState({ nodes: [], edges: [] });\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [ratingsData, setRatingsData] = useState([]);\n  const [userBias, setUserBias] = useState({});\n  const [itemBias, setItemBias] = useState({});\n  const [globalMean, setGlobalMean] = useState(0);\n\n  useEffect(() => {\n    // Load CSV when the component mounts\n    loadCSVData(\"sample_user_ratings.csv\")\n      .then((data) => {\n        setRatingsData(data);\n        // Process CSV data\n        processRatingsData(data);\n      })\n      .catch((error) => console.error(\"Error loading CSV:\", error));\n  }, []);\n\n  const processRatingsData = (data) => {\n    const ratingsDf = data;\n    const userIds = [...new Set(ratingsDf.map((row) => row.user_id))];\n    const productIds = [...new Set(ratingsDf.map((row) => row.product_id))];\n\n    const userToIdx = Object.fromEntries(userIds.map((user, i) => [user, i]));\n    const productToIdx = Object.fromEntries(productIds.map((prod, i) => [prod, i]));\n\n    // Compute Global Mean, Biases, and Residual Matrix\n    const globalMean = ratingsDf.reduce((acc, row) => acc + parseFloat(row.rating), 0) / ratingsDf.length;\n    setGlobalMean(globalMean);\n\n    const userBias = ratingsDf.reduce((acc, row) => {\n      acc[row.user_id] = acc[row.user_id] || 0;\n      acc[row.user_id] += parseFloat(row.rating);\n      return acc;\n    }, {});\n    setUserBias(userBias);\n\n    const itemBias = {}; // Compute item biases (similar to userBias logic)\n\n    // Compute user-item matrix\n    const userItemSparse = [];\n    ratingsDf.forEach((row) => {\n      const userIdx = userToIdx[row.user_id];\n      const productIdx = productToIdx[row.product_id];\n      userItemSparse.push({\n        userIdx,\n        productIdx,\n        ratingResidual: parseFloat(row.rating) - globalMean, // example residual\n      });\n    });\n\n    // SVD logic here (simplified for brevity)\n    const svd = new SomeSVDImplementation(); // You'll need to add your actual SVD logic here.\n  };\n\n  // Your recommendation logic can be called in the form submit handler as before\n\n  function generateMockRecommendations(userId, levels) {\n    const nodes = [];\n    const edges = [];\n  \n    const userNodeId = `user-${userId}`;\n    nodes.push({ id: userNodeId, label: `User ${userId}`, level: 0 });\n  \n    const recommendedProducts = [\"ProdA\", \"ProdB\", \"ProdC\"];\n    recommendedProducts.forEach((prod) => {\n      nodes.push({ id: prod, label: `${prod} (Recommended)`, level: 1 });\n      edges.push({ source: userNodeId, target: prod });\n  \n      if (levels > 1) {\n        const simItems = [`${prod}-Sim1`, `${prod}-Sim2`];\n        simItems.forEach((sim) => {\n          nodes.push({ id: sim, label: sim, level: 2 });\n          edges.push({ source: prod, target: sim });\n        });\n      }\n    });\n  \n    return { nodes, edges };\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (!userId) return;\n\n    const data = generateMockRecommendations(userId, levels);\n    setGraphData(data);\n    setSelectedNode(null);\n  }\n\n  const handleNodeClick = React.useCallback((nodeId) => {\n    setSelectedNode(nodeId);\n  }, []);\n\n  return (\n    <div className=\"app-container\">\n      <h1>Interactive Recommendation Graph</h1>\n\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"userId\">User ID: </label>\n        <input\n          id=\"userId\"\n          type=\"text\"\n          value={userId}\n          onChange={(e) => setUserId(e.target.value)}\n          required\n        />\n\n        <label htmlFor=\"levels\"> # of levels: </label>\n        <input\n          id=\"levels\"\n          type=\"number\"\n          min=\"1\"\n          value={levels}\n          onChange={(e) => setLevels(Number(e.target.value))}\n        />\n\n        <button type=\"submit\">Generate Graph</button>\n      </form>\n\n      <div className=\"graph-section\">\n        <GrapherWrapper\n          nodes={graphData.nodes}\n          edges={graphData.edges}\n          onNodeClick={handleNodeClick}\n        />\n      </div>\n\n      {selectedNode && (\n        <div className=\"detail-section\">\n          <h2>Node Details</h2>\n          <p>You clicked on: <strong>{selectedNode}</strong></p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}