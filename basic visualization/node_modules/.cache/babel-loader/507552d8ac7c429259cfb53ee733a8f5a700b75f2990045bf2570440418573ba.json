{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sajid\\\\Downloads\\\\RecomVis\\\\src\\\\GrapherWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport Graph from \"graphology\";\nimport Sigma from \"sigma\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GrapherWrapper({\n  nodes,\n  edges,\n  onNodeClick\n}) {\n  _s();\n  const containerRef = useRef(null);\n  const sigmaInstanceRef = useRef(null);\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // 1. Create a new Graphology graph\n    const graph = new Graph();\n\n    // 2. Add nodes\n    nodes.forEach(node => {\n      // For layout, we randomly assign x, y. In practice, you might run\n      // a layout algorithm or store coords in your data.\n      graph.addNode(node.id, {\n        label: node.label,\n        x: Math.random(),\n        y: Math.random(),\n        size: 8\n      });\n    });\n\n    // 3. Add edges\n    edges.forEach((edge, index) => {\n      // Ensure no duplicates. If your data might have duplicates, check first.\n      graph.addEdge(`${edge.source}`, `${edge.target}`, {\n        label: `Edge ${index}`\n      });\n    });\n\n    // 4. Initialize Sigma\n    const renderer = new Sigma(graph, containerRef.current, {\n      // You can set settings like defaultLabelColor, etc.\n    });\n    sigmaInstanceRef.current = renderer;\n\n    // 5. Listen for node clicks\n    renderer.on(\"clickNode\", e => {\n      const nodeId = e.node; // the ID of the clicked node\n      if (onNodeClick) {\n        onNodeClick(nodeId);\n      }\n    });\n\n    // Cleanup: kill the renderer if the component unmounts or re-renders\n    return () => {\n      renderer.kill();\n      sigmaInstanceRef.current = null;\n    };\n  }, [nodes, edges, onNodeClick]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      width: \"100%\",\n      height: \"500px\",\n      border: \"1px solid #ccc\",\n      marginTop: \"1rem\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(GrapherWrapper, \"1d0+tVk9WvKXGa0odUeeTQEXurc=\");\n_c = GrapherWrapper;\nexport default GrapherWrapper;\nvar _c;\n$RefreshReg$(_c, \"GrapherWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","Graph","Sigma","jsxDEV","_jsxDEV","GrapherWrapper","nodes","edges","onNodeClick","_s","containerRef","sigmaInstanceRef","current","graph","forEach","node","addNode","id","label","x","Math","random","y","size","edge","index","addEdge","source","target","renderer","on","e","nodeId","kill","ref","style","width","height","border","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sajid/Downloads/RecomVis/src/GrapherWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport Graph from \"graphology\";\r\nimport Sigma from \"sigma\";\r\n\r\nfunction GrapherWrapper({ nodes, edges, onNodeClick }) {\r\n  const containerRef = useRef(null);\r\n  const sigmaInstanceRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!containerRef.current) return;\r\n\r\n    // 1. Create a new Graphology graph\r\n    const graph = new Graph();\r\n\r\n    // 2. Add nodes\r\n    nodes.forEach((node) => {\r\n      // For layout, we randomly assign x, y. In practice, you might run\r\n      // a layout algorithm or store coords in your data.\r\n      graph.addNode(node.id, {\r\n        label: node.label,\r\n        x: Math.random(),\r\n        y: Math.random(),\r\n        size: 8,\r\n      });\r\n    });\r\n\r\n    // 3. Add edges\r\n    edges.forEach((edge, index) => {\r\n      // Ensure no duplicates. If your data might have duplicates, check first.\r\n      graph.addEdge(`${edge.source}`, `${edge.target}`, {\r\n        label: `Edge ${index}`,\r\n      });\r\n    });\r\n\r\n    // 4. Initialize Sigma\r\n    const renderer = new Sigma(graph, containerRef.current, {\r\n      // You can set settings like defaultLabelColor, etc.\r\n    });\r\n    sigmaInstanceRef.current = renderer;\r\n\r\n    // 5. Listen for node clicks\r\n    renderer.on(\"clickNode\", (e) => {\r\n      const nodeId = e.node; // the ID of the clicked node\r\n      if (onNodeClick) {\r\n        onNodeClick(nodeId);\r\n      }\r\n    });\r\n\r\n    // Cleanup: kill the renderer if the component unmounts or re-renders\r\n    return () => {\r\n      renderer.kill();\r\n      sigmaInstanceRef.current = null;\r\n    };\r\n  }, [nodes, edges, onNodeClick]);\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"500px\",\r\n        border: \"1px solid #ccc\",\r\n        marginTop: \"1rem\",\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default GrapherWrapper;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,KAAK,MAAM,YAAY;AAC9B,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,cAAcA,CAAC;EAAEC,KAAK;EAAEC,KAAK;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EACrD,MAAMC,YAAY,GAAGV,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMW,gBAAgB,GAAGX,MAAM,CAAC,IAAI,CAAC;EAErCD,SAAS,CAAC,MAAM;IACd,IAAI,CAACW,YAAY,CAACE,OAAO,EAAE;;IAE3B;IACA,MAAMC,KAAK,GAAG,IAAIZ,KAAK,CAAC,CAAC;;IAEzB;IACAK,KAAK,CAACQ,OAAO,CAAEC,IAAI,IAAK;MACtB;MACA;MACAF,KAAK,CAACG,OAAO,CAACD,IAAI,CAACE,EAAE,EAAE;QACrBC,KAAK,EAAEH,IAAI,CAACG,KAAK;QACjBC,CAAC,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC;QAChBC,CAAC,EAAEF,IAAI,CAACC,MAAM,CAAC,CAAC;QAChBE,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACAhB,KAAK,CAACO,OAAO,CAAC,CAACU,IAAI,EAAEC,KAAK,KAAK;MAC7B;MACAZ,KAAK,CAACa,OAAO,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAE,GAAGH,IAAI,CAACI,MAAM,EAAE,EAAE;QAChDV,KAAK,EAAE,QAAQO,KAAK;MACtB,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA,MAAMI,QAAQ,GAAG,IAAI3B,KAAK,CAACW,KAAK,EAAEH,YAAY,CAACE,OAAO,EAAE;MACtD;IAAA,CACD,CAAC;IACFD,gBAAgB,CAACC,OAAO,GAAGiB,QAAQ;;IAEnC;IACAA,QAAQ,CAACC,EAAE,CAAC,WAAW,EAAGC,CAAC,IAAK;MAC9B,MAAMC,MAAM,GAAGD,CAAC,CAAChB,IAAI,CAAC,CAAC;MACvB,IAAIP,WAAW,EAAE;QACfA,WAAW,CAACwB,MAAM,CAAC;MACrB;IACF,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXH,QAAQ,CAACI,IAAI,CAAC,CAAC;MACftB,gBAAgB,CAACC,OAAO,GAAG,IAAI;IACjC,CAAC;EACH,CAAC,EAAE,CAACN,KAAK,EAAEC,KAAK,EAAEC,WAAW,CAAC,CAAC;EAE/B,oBACEJ,OAAA;IACE8B,GAAG,EAAExB,YAAa;IAClByB,KAAK,EAAE;MACLC,KAAK,EAAE,MAAM;MACbC,MAAM,EAAE,OAAO;MACfC,MAAM,EAAE,gBAAgB;MACxBC,SAAS,EAAE;IACb;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN;AAAClC,EAAA,CA9DQJ,cAAc;AAAAuC,EAAA,GAAdvC,cAAc;AAgEvB,eAAeA,cAAc;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}