{"ast":null,"code":"var _jsxFileName = \"/Users/rohit/College/Spring2025/CSE6242/RecomViz/basic visualization/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport GrapherWrapper from \"./GrapherWrapper\";\nimport \"./App.css\";\n\n// SVD recommendation logic function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getRecommendationsSVD(userId, userToIdx, productIds, ratingsData, userLatent, itemLatent, globalMean, userBias, itemBias, topN = 10) {\n  const userIndex = userToIdx[userId];\n  const predictedResiduals = userLatent[userIndex].map((latent, idx) => latent * itemLatent[idx]).reduce((a, b) => a + b, 0);\n  const userB = userBias[userId] || 0.0;\n  let recommendations = productIds.map(prod => {\n    const itemB = itemBias[prod] || 0.0;\n    const predictedRating = globalMean + userB + itemB + predictedResiduals;\n    return {\n      product_id: prod,\n      predicted_rating: predictedRating\n    };\n  });\n  recommendations = recommendations.filter(rec => !ratingsData.some(row => row[2] === userId && row[1] === rec.product_id));\n  recommendations = recommendations.sort((a, b) => b.predicted_rating - a.predicted_rating);\n  return recommendations.slice(0, topN);\n}\nfunction App() {\n  _s();\n  const [userId, setUserId] = useState(\"\");\n  const [levels, setLevels] = useState(1);\n  const [graphData, setGraphData] = useState({\n    nodes: [],\n    edges: []\n  });\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [ratingsData, setRatingsData] = useState([]);\n  const [userToIdx, setUserToIdx] = useState({});\n  const [productIds, setProductIds] = useState([]);\n  const [userBias, setUserBias] = useState({});\n  const [itemBias, setItemBias] = useState({});\n  const [userLatent, setUserLatent] = useState([]);\n  const [itemLatent, setItemLatent] = useState([]);\n  const [globalMean, setGlobalMean] = useState(0);\n\n  // --- Helper function to process the ratings CSV data ---\n  const processRatingsData = data => {\n    // Ignore first row and parse the CSV data\n    data = data.slice(1);\n    let ratings = data.map(row => {\n      return [parseFloat(row[0]), row[1], row[2]];\n    });\n    const userIds = [...new Set(ratings.map(row => row[2]))];\n    const productIds = [...new Set(ratings.map(row => row[1]))];\n    const userToIdx = userIds.reduce((acc, user, idx) => {\n      acc[user] = idx;\n      return acc;\n    }, {});\n    setUserToIdx(userToIdx);\n    setProductIds(productIds);\n    return ratings;\n  };\n\n  // --- Effect hook to load and process data ---\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(\"sample_user_ratings.csv\");\n      const rawData = await response.text();\n      const data = rawData.split(\"\\n\").map(line => line.split(\",\"));\n      const processedData = processRatingsData(data);\n\n      // Calculate Global Mean\n      const globalMean = processedData.reduce((sum, row) => sum + row[0], 0) / processedData.length;\n      setGlobalMean(globalMean);\n\n      // Calculate User and Item Biases\n      const userRatings = processedData.reduce((acc, row) => {\n        if (!acc[row[2]]) acc[row[2]] = [];\n        acc[row[2]].push(row);\n        return acc;\n      }, {});\n      const userBias = Object.keys(userRatings).reduce((acc, user) => {\n        const userRatingMean = userRatings[user].reduce((sum, row) => sum + row[0], 0) / userRatings[user].length;\n        acc[user] = userRatingMean - globalMean;\n        return acc;\n      }, {});\n      setUserBias(userBias);\n\n      // Calculate Item Biases\n      const itemRatings = processedData.reduce((acc, row) => {\n        if (!acc[row[1]]) acc[row[1]] = [];\n        acc[row[1]].push(row);\n        return acc;\n      }, {});\n      const itemBias = Object.keys(itemRatings).reduce((acc, prod) => {\n        const itemRatingMean = itemRatings[prod].reduce((sum, row) => sum + row[0], 0) / itemRatings[prod].length;\n        acc[prod] = itemRatingMean - globalMean;\n        return acc;\n      }, {});\n      setItemBias(itemBias);\n\n      // Now we perform the SVD on the ratings matrix\n      const rowIndices = processedData.map(row => userToIdx[row[2]]);\n      const colIndices = processedData.map(row => productIds.indexOf(row[1]));\n      const dataValues = processedData.map(row => row[0]);\n      const sparseMatrix = new window.SparseMatrix(rowIndices, colIndices, dataValues);\n      const svd = new window.TruncatedSVD(20);\n      const userLatent = svd.fitTransform(sparseMatrix);\n      const itemLatent = svd.components_.transpose();\n      setUserLatent(userLatent);\n      setItemLatent(itemLatent);\n    };\n    fetchData();\n  }, []);\n\n  // --- Generate the graph ---\n  function generateMockRecommendations(userId, levels) {\n    if (!userId) return;\n    const recommendations = getRecommendationsSVD(userId, userToIdx, productIds, ratingsData, userLatent, itemLatent, globalMean, userBias, itemBias, 10);\n    console.log(\"Recommendations for User:\", userId);\n    console.log(recommendations); // Debugging log to check recommendations\n\n    const nodes = [];\n    const edges = [];\n\n    // Level 0: User node\n    const userNodeId = `user-${userId}`;\n    nodes.push({\n      id: userNodeId,\n      label: `User ${userId}`,\n      level: 0\n    });\n\n    // Level 1: Recommended products\n    recommendations.forEach(rec => {\n      nodes.push({\n        id: rec.product_id,\n        label: `${rec.product_id} (Recommended)`,\n        level: 1\n      });\n      edges.push({\n        source: userNodeId,\n        target: rec.product_id\n      });\n    });\n    return {\n      nodes,\n      edges\n    };\n  }\n\n  // --- Handle form submission ---\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (!userId) return;\n    const data = generateMockRecommendations(userId, levels);\n    setGraphData(data);\n    setSelectedNode(null);\n  }\n\n  // --- Handle node click ---\n  const handleNodeClick = React.useCallback(nodeId => {\n    setSelectedNode(nodeId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interactive Recommendation Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"userId\",\n        children: \"User ID: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"userId\",\n        type: \"text\",\n        value: userId,\n        onChange: e => setUserId(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"levels\",\n        children: \" # of levels: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"levels\",\n        type: \"number\",\n        min: \"1\",\n        value: levels,\n        onChange: e => setLevels(Number(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Generate Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-section\",\n      children: /*#__PURE__*/_jsxDEV(GrapherWrapper, {\n        nodes: graphData.nodes,\n        edges: graphData.edges,\n        onNodeClick: handleNodeClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"detail-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Node Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You clicked on: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: selectedNode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QVDbjBFCUjW2PCRleYeBPG+hsGo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GrapherWrapper","jsxDEV","_jsxDEV","getRecommendationsSVD","userId","userToIdx","productIds","ratingsData","userLatent","itemLatent","globalMean","userBias","itemBias","topN","userIndex","predictedResiduals","map","latent","idx","reduce","a","b","userB","recommendations","prod","itemB","predictedRating","product_id","predicted_rating","filter","rec","some","row","sort","slice","App","_s","setUserId","levels","setLevels","graphData","setGraphData","nodes","edges","selectedNode","setSelectedNode","setRatingsData","setUserToIdx","setProductIds","setUserBias","setItemBias","setUserLatent","setItemLatent","setGlobalMean","processRatingsData","data","ratings","parseFloat","userIds","Set","acc","user","fetchData","response","fetch","rawData","text","split","line","processedData","sum","length","userRatings","push","Object","keys","userRatingMean","itemRatings","itemRatingMean","rowIndices","colIndices","indexOf","dataValues","sparseMatrix","window","SparseMatrix","svd","TruncatedSVD","fitTransform","components_","transpose","generateMockRecommendations","console","log","userNodeId","id","label","level","forEach","source","target","handleSubmit","e","preventDefault","handleNodeClick","useCallback","nodeId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","value","onChange","required","min","Number","onNodeClick","_c","$RefreshReg$"],"sources":["/Users/rohit/College/Spring2025/CSE6242/RecomViz/basic visualization/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport GrapherWrapper from \"./GrapherWrapper\";\nimport \"./App.css\";\n\n// SVD recommendation logic function\nfunction getRecommendationsSVD(userId, userToIdx, productIds, ratingsData, userLatent, itemLatent, globalMean, userBias, itemBias, topN = 10) {\n  const userIndex = userToIdx[userId];\n  const predictedResiduals = userLatent[userIndex].map((latent, idx) => \n    latent * itemLatent[idx]\n  ).reduce((a, b) => a + b, 0);\n\n  const userB = userBias[userId] || 0.0;\n  \n  let recommendations = productIds.map((prod) => {\n    const itemB = itemBias[prod] || 0.0;\n    const predictedRating = globalMean + userB + itemB + predictedResiduals;\n    return {\n      product_id: prod,\n      predicted_rating: predictedRating\n    };\n  });\n\n  recommendations = recommendations.filter((rec) => !ratingsData.some((row) => row[2] === userId && row[1] === rec.product_id));\n  recommendations = recommendations.sort((a, b) => b.predicted_rating - a.predicted_rating);\n  \n  return recommendations.slice(0, topN);\n}\n\nfunction App() {\n  const [userId, setUserId] = useState(\"\");\n  const [levels, setLevels] = useState(1);\n  const [graphData, setGraphData] = useState({ nodes: [], edges: [] });\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  const [ratingsData, setRatingsData] = useState([]);\n  const [userToIdx, setUserToIdx] = useState({});\n  const [productIds, setProductIds] = useState([]);\n  const [userBias, setUserBias] = useState({});\n  const [itemBias, setItemBias] = useState({});\n  const [userLatent, setUserLatent] = useState([]);\n  const [itemLatent, setItemLatent] = useState([]);\n  const [globalMean, setGlobalMean] = useState(0);\n\n  // --- Helper function to process the ratings CSV data ---\n  const processRatingsData = (data) => {\n    // Ignore first row and parse the CSV data\n    data = data.slice(1);\n    let ratings = data.map((row) => {\n      return [parseFloat(row[0]), row[1], row[2]];\n    });\n\n    const userIds = [...new Set(ratings.map((row) => row[2]))];\n    const productIds = [...new Set(ratings.map((row) => row[1]))];\n    \n    const userToIdx = userIds.reduce((acc, user, idx) => {\n      acc[user] = idx;\n      return acc;\n    }, {});\n\n    setUserToIdx(userToIdx);\n    setProductIds(productIds);\n    \n    return ratings;\n  };\n\n  // --- Effect hook to load and process data ---\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(\"sample_user_ratings.csv\");\n      const rawData = await response.text();\n      const data = rawData.split(\"\\n\").map((line) => line.split(\",\"));\n      const processedData = processRatingsData(data);\n\n      // Calculate Global Mean\n      const globalMean = processedData.reduce((sum, row) => sum + row[0], 0) / processedData.length;\n      setGlobalMean(globalMean);\n\n      // Calculate User and Item Biases\n      const userRatings = processedData.reduce((acc, row) => {\n        if (!acc[row[2]]) acc[row[2]] = [];\n        acc[row[2]].push(row);\n        return acc;\n      }, {});\n\n      const userBias = Object.keys(userRatings).reduce((acc, user) => {\n        const userRatingMean = userRatings[user].reduce((sum, row) => sum + row[0], 0) / userRatings[user].length;\n        acc[user] = userRatingMean - globalMean;\n        return acc;\n      }, {});\n\n      setUserBias(userBias);\n\n      // Calculate Item Biases\n      const itemRatings = processedData.reduce((acc, row) => {\n        if (!acc[row[1]]) acc[row[1]] = [];\n        acc[row[1]].push(row);\n        return acc;\n      }, {});\n\n      const itemBias = Object.keys(itemRatings).reduce((acc, prod) => {\n        const itemRatingMean = itemRatings[prod].reduce((sum, row) => sum + row[0], 0) / itemRatings[prod].length;\n        acc[prod] = itemRatingMean - globalMean;\n        return acc;\n      }, {});\n\n      setItemBias(itemBias);\n\n      // Now we perform the SVD on the ratings matrix\n      const rowIndices = processedData.map((row) => userToIdx[row[2]]);\n      const colIndices = processedData.map((row) => productIds.indexOf(row[1]));\n      const dataValues = processedData.map((row) => row[0]);\n\n      const sparseMatrix = new window.SparseMatrix(rowIndices, colIndices, dataValues);\n      const svd = new window.TruncatedSVD(20);\n      const userLatent = svd.fitTransform(sparseMatrix);\n      const itemLatent = svd.components_.transpose();\n\n      setUserLatent(userLatent);\n      setItemLatent(itemLatent);\n    };\n\n    fetchData();\n  }, []);\n\n  // --- Generate the graph ---\n  function generateMockRecommendations(userId, levels) {\n    if (!userId) return;\n\n    const recommendations = getRecommendationsSVD(userId, userToIdx, productIds, ratingsData, userLatent, itemLatent, globalMean, userBias, itemBias, 10);\n\n    console.log(\"Recommendations for User:\", userId);\n    console.log(recommendations); // Debugging log to check recommendations\n\n    const nodes = [];\n    const edges = [];\n\n    // Level 0: User node\n    const userNodeId = `user-${userId}`;\n    nodes.push({ id: userNodeId, label: `User ${userId}`, level: 0 });\n\n    // Level 1: Recommended products\n    recommendations.forEach((rec) => {\n      nodes.push({ id: rec.product_id, label: `${rec.product_id} (Recommended)`, level: 1 });\n      edges.push({ source: userNodeId, target: rec.product_id });\n    });\n\n    return { nodes, edges };\n  }\n\n  // --- Handle form submission ---\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (!userId) return;\n\n    const data = generateMockRecommendations(userId, levels);\n    setGraphData(data);\n    setSelectedNode(null);\n  }\n\n  // --- Handle node click ---\n  const handleNodeClick = React.useCallback((nodeId) => {\n    setSelectedNode(nodeId);\n  }, []);\n\n  return (\n    <div className=\"app-container\">\n      <h1>Interactive Recommendation Graph</h1>\n\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"userId\">User ID: </label>\n        <input\n          id=\"userId\"\n          type=\"text\"\n          value={userId}\n          onChange={(e) => setUserId(e.target.value)}\n          required\n        />\n\n        <label htmlFor=\"levels\"> # of levels: </label>\n        <input\n          id=\"levels\"\n          type=\"number\"\n          min=\"1\"\n          value={levels}\n          onChange={(e) => setLevels(Number(e.target.value))}\n        />\n\n        <button type=\"submit\">Generate Graph</button>\n      </form>\n\n      <div className=\"graph-section\">\n        <GrapherWrapper\n          nodes={graphData.nodes}\n          edges={graphData.edges}\n          onNodeClick={handleNodeClick}\n        />\n      </div>\n\n      {selectedNode && (\n        <div className=\"detail-section\">\n          <h2>Node Details</h2>\n          <p>You clicked on: <strong>{selectedNode}</strong></p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}