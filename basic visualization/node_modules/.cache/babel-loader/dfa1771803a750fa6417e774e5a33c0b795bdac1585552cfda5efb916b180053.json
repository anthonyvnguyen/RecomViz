{"ast":null,"code":"var _jsxFileName = \"/Users/rohit/College/Spring2025/CSE6242/RecomViz/basic visualization/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport GrapherWrapper from \"./GrapherWrapper\";\nimport \"./App.css\";\n\n// --- Helper function to process ratings data ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction processRatingsData(data) {\n  // Ignore the first row (header)\n  data = data.slice(1);\n\n  // Map the data into a proper format\n  let ratings = data.map(row => {\n    return [parseFloat(row[0]), row[1], row[2]]; // rating, product_id, user_id\n  });\n  const userIds = [...new Set(ratings.map(row => row[2]))];\n  const productIds = [...new Set(ratings.map(row => row[1]))];\n\n  // Create mapping for user_ids and product_ids to indices\n  const userToIdx = userIds.reduce((acc, user, idx) => {\n    acc[user] = idx;\n    return acc;\n  }, {});\n  return {\n    ratings,\n    userToIdx,\n    productIds\n  };\n}\n\n// --- SVD recommendation logic function ---\nfunction getRecommendationsSVD(userId, userToIdx, productIds, ratingsData, userLatent, itemLatent, globalMean, userBias, itemBias, topN = 10) {\n  const userIndex = userToIdx[userId];\n  const predictedResiduals = userLatent[userIndex].map((latent, idx) => latent * itemLatent[idx]).reduce((a, b) => a + b, 0);\n  const userB = userBias[userId] || 0.0;\n  let recommendations = productIds.map(prod => {\n    const itemB = itemBias[prod] || 0.0;\n    const predictedRating = globalMean + userB + itemB + predictedResiduals;\n    return {\n      product_id: prod,\n      predicted_rating: predictedRating\n    };\n  });\n  recommendations = recommendations.filter(rec => !ratingsData.some(row => row[2] === userId && row[1] === rec.product_id));\n  recommendations = recommendations.sort((a, b) => b.predicted_rating - a.predicted_rating);\n  return recommendations.slice(0, topN);\n}\nfunction App() {\n  _s();\n  const [userId, setUserId] = useState(\"\");\n  const [levels, setLevels] = useState(1);\n  const [graphData, setGraphData] = useState({\n    nodes: [],\n    edges: []\n  });\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [ratingsData, setRatingsData] = useState([]);\n  const [userToIdx, setUserToIdx] = useState({});\n  const [productIds, setProductIds] = useState([]);\n  const [userBias, setUserBias] = useState({});\n  const [itemBias, setItemBias] = useState({});\n  const [userLatent, setUserLatent] = useState([]);\n  const [itemLatent, setItemLatent] = useState([]);\n  const [globalMean, setGlobalMean] = useState(0);\n\n  // --- Effect hook to load and process data ---\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(\"sample_user_ratings.csv\");\n      const rawData = await response.text();\n      const data = rawData.split(\"\\n\").map(line => line.split(\",\"));\n      const {\n        ratings,\n        userToIdx,\n        productIds\n      } = processRatingsData(data);\n      setRatingsData(ratings);\n      setUserToIdx(userToIdx);\n      setProductIds(productIds);\n\n      // Calculate Global Mean\n      const globalMean = ratings.reduce((sum, row) => sum + row[0], 0) / ratings.length;\n      setGlobalMean(globalMean);\n\n      // Calculate User Biases\n      const userRatings = ratings.reduce((acc, row) => {\n        if (!acc[row[2]]) acc[row[2]] = [];\n        acc[row[2]].push(row);\n        return acc;\n      }, {});\n      const userBias = Object.keys(userRatings).reduce((acc, user) => {\n        const userRatingMean = userRatings[user].reduce((sum, row) => sum + row[0], 0) / userRatings[user].length;\n        acc[user] = userRatingMean - globalMean;\n        return acc;\n      }, {});\n      setUserBias(userBias);\n\n      // Calculate Item Biases\n      const itemRatings = ratings.reduce((acc, row) => {\n        if (!acc[row[1]]) acc[row[1]] = [];\n        acc[row[1]].push(row);\n        return acc;\n      }, {});\n      const itemBias = Object.keys(itemRatings).reduce((acc, prod) => {\n        const itemRatingMean = itemRatings[prod].reduce((sum, row) => sum + row[0], 0) / itemRatings[prod].length;\n        acc[prod] = itemRatingMean - globalMean;\n        return acc;\n      }, {});\n      setItemBias(itemBias);\n\n      // Now we perform the SVD on the ratings matrix\n      const rowIndices = ratings.map(row => userToIdx[row[2]]);\n      const colIndices = ratings.map(row => productIds.indexOf(row[1]));\n      const dataValues = ratings.map(row => row[0]);\n      const sparseMatrix = new window.SparseMatrix(rowIndices, colIndices, dataValues);\n      const svd = new window.TruncatedSVD(20);\n      const userLatent = svd.fitTransform(sparseMatrix);\n      const itemLatent = svd.components_.transpose();\n      setUserLatent(userLatent);\n      setItemLatent(itemLatent);\n    };\n    fetchData();\n  }, []);\n\n  // --- Generate graph based on recommendations ---\n  function generateMockRecommendations(userId, levels) {\n    if (!userId) return;\n    const recommendations = getRecommendationsSVD(userId, userToIdx, productIds, ratingsData, userLatent, itemLatent, globalMean, userBias, itemBias, 10);\n    console.log(\"Recommendations for User:\", userId);\n    console.log(recommendations); // Debugging log to check recommendations\n\n    const nodes = [];\n    const edges = [];\n\n    // Level 0: User node\n    const userNodeId = `user-${userId}`;\n    nodes.push({\n      id: userNodeId,\n      label: `User ${userId}`,\n      level: 0\n    });\n\n    // Level 1: Recommended products\n    recommendations.forEach(rec => {\n      nodes.push({\n        id: rec.product_id,\n        label: `${rec.product_id} (Recommended)`,\n        level: 1\n      });\n      edges.push({\n        source: userNodeId,\n        target: rec.product_id\n      });\n    });\n    return {\n      nodes,\n      edges\n    };\n  }\n\n  // --- Handle form submission ---\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (!userId) return;\n    const data = generateMockRecommendations(userId, levels);\n    setGraphData(data);\n    setSelectedNode(null);\n  }\n\n  // --- Handle node click ---\n  const handleNodeClick = React.useCallback(nodeId => {\n    setSelectedNode(nodeId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interactive Recommendation Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"userId\",\n        children: \"User ID: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"userId\",\n        type: \"text\",\n        value: userId,\n        onChange: e => setUserId(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"levels\",\n        children: \" # of levels: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"levels\",\n        type: \"number\",\n        min: \"1\",\n        value: levels,\n        onChange: e => setLevels(Number(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Generate Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-section\",\n      children: /*#__PURE__*/_jsxDEV(GrapherWrapper, {\n        nodes: graphData.nodes,\n        edges: graphData.edges,\n        onNodeClick: handleNodeClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"detail-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Node Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You clicked on: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: selectedNode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QVDbjBFCUjW2PCRleYeBPG+hsGo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GrapherWrapper","jsxDEV","_jsxDEV","processRatingsData","data","slice","ratings","map","row","parseFloat","userIds","Set","productIds","userToIdx","reduce","acc","user","idx","getRecommendationsSVD","userId","ratingsData","userLatent","itemLatent","globalMean","userBias","itemBias","topN","userIndex","predictedResiduals","latent","a","b","userB","recommendations","prod","itemB","predictedRating","product_id","predicted_rating","filter","rec","some","sort","App","_s","setUserId","levels","setLevels","graphData","setGraphData","nodes","edges","selectedNode","setSelectedNode","setRatingsData","setUserToIdx","setProductIds","setUserBias","setItemBias","setUserLatent","setItemLatent","setGlobalMean","fetchData","response","fetch","rawData","text","split","line","sum","length","userRatings","push","Object","keys","userRatingMean","itemRatings","itemRatingMean","rowIndices","colIndices","indexOf","dataValues","sparseMatrix","window","SparseMatrix","svd","TruncatedSVD","fitTransform","components_","transpose","generateMockRecommendations","console","log","userNodeId","id","label","level","forEach","source","target","handleSubmit","e","preventDefault","handleNodeClick","useCallback","nodeId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","value","onChange","required","min","Number","onNodeClick","_c","$RefreshReg$"],"sources":["/Users/rohit/College/Spring2025/CSE6242/RecomViz/basic visualization/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport GrapherWrapper from \"./GrapherWrapper\";\nimport \"./App.css\";\n\n// --- Helper function to process ratings data ---\nfunction processRatingsData(data) {\n  // Ignore the first row (header)\n  data = data.slice(1);\n\n  // Map the data into a proper format\n  let ratings = data.map((row) => {\n    return [parseFloat(row[0]), row[1], row[2]]; // rating, product_id, user_id\n  });\n\n  const userIds = [...new Set(ratings.map((row) => row[2]))];\n  const productIds = [...new Set(ratings.map((row) => row[1]))];\n\n  // Create mapping for user_ids and product_ids to indices\n  const userToIdx = userIds.reduce((acc, user, idx) => {\n    acc[user] = idx;\n    return acc;\n  }, {});\n\n  return { ratings, userToIdx, productIds };\n}\n\n// --- SVD recommendation logic function ---\nfunction getRecommendationsSVD(userId, userToIdx, productIds, ratingsData, userLatent, itemLatent, globalMean, userBias, itemBias, topN = 10) {\n  const userIndex = userToIdx[userId];\n  const predictedResiduals = userLatent[userIndex].map((latent, idx) => \n    latent * itemLatent[idx]\n  ).reduce((a, b) => a + b, 0);\n\n  const userB = userBias[userId] || 0.0;\n  \n  let recommendations = productIds.map((prod) => {\n    const itemB = itemBias[prod] || 0.0;\n    const predictedRating = globalMean + userB + itemB + predictedResiduals;\n    return {\n      product_id: prod,\n      predicted_rating: predictedRating\n    };\n  });\n\n  recommendations = recommendations.filter((rec) => !ratingsData.some((row) => row[2] === userId && row[1] === rec.product_id));\n  recommendations = recommendations.sort((a, b) => b.predicted_rating - a.predicted_rating);\n  \n  return recommendations.slice(0, topN);\n}\n\nfunction App() {\n  const [userId, setUserId] = useState(\"\");\n  const [levels, setLevels] = useState(1);\n  const [graphData, setGraphData] = useState({ nodes: [], edges: [] });\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  const [ratingsData, setRatingsData] = useState([]);\n  const [userToIdx, setUserToIdx] = useState({});\n  const [productIds, setProductIds] = useState([]);\n  const [userBias, setUserBias] = useState({});\n  const [itemBias, setItemBias] = useState({});\n  const [userLatent, setUserLatent] = useState([]);\n  const [itemLatent, setItemLatent] = useState([]);\n  const [globalMean, setGlobalMean] = useState(0);\n\n  // --- Effect hook to load and process data ---\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(\"sample_user_ratings.csv\");\n      const rawData = await response.text();\n      const data = rawData.split(\"\\n\").map((line) => line.split(\",\"));\n      const { ratings, userToIdx, productIds } = processRatingsData(data);\n\n      setRatingsData(ratings);\n      setUserToIdx(userToIdx);\n      setProductIds(productIds);\n\n      // Calculate Global Mean\n      const globalMean = ratings.reduce((sum, row) => sum + row[0], 0) / ratings.length;\n      setGlobalMean(globalMean);\n\n      // Calculate User Biases\n      const userRatings = ratings.reduce((acc, row) => {\n        if (!acc[row[2]]) acc[row[2]] = [];\n        acc[row[2]].push(row);\n        return acc;\n      }, {});\n\n      const userBias = Object.keys(userRatings).reduce((acc, user) => {\n        const userRatingMean = userRatings[user].reduce((sum, row) => sum + row[0], 0) / userRatings[user].length;\n        acc[user] = userRatingMean - globalMean;\n        return acc;\n      }, {});\n\n      setUserBias(userBias);\n\n      // Calculate Item Biases\n      const itemRatings = ratings.reduce((acc, row) => {\n        if (!acc[row[1]]) acc[row[1]] = [];\n        acc[row[1]].push(row);\n        return acc;\n      }, {});\n\n      const itemBias = Object.keys(itemRatings).reduce((acc, prod) => {\n        const itemRatingMean = itemRatings[prod].reduce((sum, row) => sum + row[0], 0) / itemRatings[prod].length;\n        acc[prod] = itemRatingMean - globalMean;\n        return acc;\n      }, {});\n\n      setItemBias(itemBias);\n\n      // Now we perform the SVD on the ratings matrix\n      const rowIndices = ratings.map((row) => userToIdx[row[2]]);\n      const colIndices = ratings.map((row) => productIds.indexOf(row[1]));\n      const dataValues = ratings.map((row) => row[0]);\n\n      const sparseMatrix = new window.SparseMatrix(rowIndices, colIndices, dataValues);\n      const svd = new window.TruncatedSVD(20);\n      const userLatent = svd.fitTransform(sparseMatrix);\n      const itemLatent = svd.components_.transpose();\n\n      setUserLatent(userLatent);\n      setItemLatent(itemLatent);\n    };\n\n    fetchData();\n  }, []);\n\n  // --- Generate graph based on recommendations ---\n  function generateMockRecommendations(userId, levels) {\n    if (!userId) return;\n\n    const recommendations = getRecommendationsSVD(userId, userToIdx, productIds, ratingsData, userLatent, itemLatent, globalMean, userBias, itemBias, 10);\n\n    console.log(\"Recommendations for User:\", userId);\n    console.log(recommendations); // Debugging log to check recommendations\n\n    const nodes = [];\n    const edges = [];\n\n    // Level 0: User node\n    const userNodeId = `user-${userId}`;\n    nodes.push({ id: userNodeId, label: `User ${userId}`, level: 0 });\n\n    // Level 1: Recommended products\n    recommendations.forEach((rec) => {\n      nodes.push({ id: rec.product_id, label: `${rec.product_id} (Recommended)`, level: 1 });\n      edges.push({ source: userNodeId, target: rec.product_id });\n    });\n\n    return { nodes, edges };\n  }\n\n  // --- Handle form submission ---\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (!userId) return;\n\n    const data = generateMockRecommendations(userId, levels);\n    setGraphData(data);\n    setSelectedNode(null);\n  }\n\n  // --- Handle node click ---\n  const handleNodeClick = React.useCallback((nodeId) => {\n    setSelectedNode(nodeId);\n  }, []);\n\n  return (\n    <div className=\"app-container\">\n      <h1>Interactive Recommendation Graph</h1>\n\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"userId\">User ID: </label>\n        <input\n          id=\"userId\"\n          type=\"text\"\n          value={userId}\n          onChange={(e) => setUserId(e.target.value)}\n          required\n        />\n\n        <label htmlFor=\"levels\"> # of levels: </label>\n        <input\n          id=\"levels\"\n          type=\"number\"\n          min=\"1\"\n          value={levels}\n          onChange={(e) => setLevels(Number(e.target.value))}\n        />\n\n        <button type=\"submit\">Generate Graph</button>\n      </form>\n\n      <div className=\"graph-section\">\n        <GrapherWrapper\n          nodes={graphData.nodes}\n          edges={graphData.edges}\n          onNodeClick={handleNodeClick}\n        />\n      </div>\n\n      {selectedNode && (\n        <div className=\"detail-section\">\n          <h2>Node Details</h2>\n          <p>You clicked on: <strong>{selectedNode}</strong></p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}