{"ast":null,"code":"var _jsxFileName = \"/Users/rohit/College/Spring2025/CSE6242/RecomViz/basic visualization/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\"; // Add this import\nimport GrapherWrapper from \"./GrapherWrapper\";\nimport \"./App.css\";\n\n// Helper function to load CSV data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst loadCSVData = csvFilePath => {\n  return new Promise((resolve, reject) => {\n    Papa.parse(csvFilePath, {\n      download: true,\n      complete: result => {\n        resolve(result.data);\n      },\n      error: error => reject(error)\n    });\n  });\n};\nfunction App() {\n  _s();\n  const [userId, setUserId] = useState(\"\");\n  const [levels, setLevels] = useState(1);\n  const [graphData, setGraphData] = useState({\n    nodes: [],\n    edges: []\n  });\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [ratingsData, setRatingsData] = useState([]);\n  const [userBias, setUserBias] = useState({});\n  const [itemBias, setItemBias] = useState({});\n  const [globalMean, setGlobalMean] = useState(0);\n  const [userLatent, setUserLatent] = useState([]);\n  const [itemLatent, setItemLatent] = useState([]);\n  const [userToIdx, setUserToIdx] = useState({});\n  const [productToIdx, setProductToIdx] = useState({});\n  useEffect(() => {\n    // Load CSV when the component mounts\n    loadCSVData(\"/data/sample_user_ratings.csv\").then(data => {\n      setRatingsData(data);\n      // Process CSV data\n      processRatingsData(data);\n    }).catch(error => console.error(\"Error loading CSV:\", error));\n  }, []);\n  const processRatingsData = data => {\n    // Parse and prepare the data as needed\n    const ratingsDf = data;\n    const userIds = [...new Set(ratingsDf.map(row => row.user_id))];\n    const productIds = [...new Set(ratingsDf.map(row => row.product_id))];\n    console.log(\"Unique User IDs:\", userIds);\n    console.log(\"Unique Product IDs:\", productIds);\n    const userToIdx = Object.fromEntries(userIds.map((user, i) => [user, i]));\n    const productToIdx = Object.fromEntries(productIds.map((prod, i) => [prod, i]));\n\n    // Compute Global Mean, Biases, and Residual Matrix\n    const globalMean = ratingsDf.reduce((acc, row) => acc + parseFloat(row.rating), 0) / ratingsDf.length;\n    setGlobalMean(globalMean);\n    const userBias = ratingsDf.reduce((acc, row) => {\n      acc[row.user_id] = acc[row.user_id] || 0;\n      acc[row.user_id] += parseFloat(row.rating);\n      return acc;\n    }, {});\n    setUserBias(userBias);\n    const itemBias = {}; // Compute item biases (similar to userBias logic)\n    setItemBias(itemBias);\n\n    // Compute user-item matrix\n    const userItemSparse = [];\n    ratingsDf.forEach(row => {\n      const userIdx = userToIdx[row.user_id];\n      const productIdx = productToIdx[row.product_id];\n      userItemSparse.push({\n        userIdx,\n        productIdx,\n        ratingResidual: parseFloat(row.rating) - globalMean // example residual\n      });\n    });\n\n    // Apply SVD\n    applySVD(userItemSparse, userIds, productIds);\n  };\n\n  // SVD Logic\n  const applySVD = (userItemSparse, userIds, productIds) => {\n    const nFactors = 20; // You can tune this value\n    const svd = new window.SVD(nFactors); // Use your SVD implementation or a library\n\n    // Perform SVD (simplified, adjust based on actual SVD library)\n    const userLatent = svd.fit_transform(userItemSparse);\n    const itemLatent = svd.components_.T;\n    setUserLatent(userLatent);\n    setItemLatent(itemLatent);\n    setUserToIdx(userToIdx);\n    setProductToIdx(productToIdx);\n  };\n  const getRecommendationsSVD = (userId, userToIdx, productIds, ratingsDf, userLatent, itemLatent, top_n = 10) => {\n    if (!(userId in userToIdx)) {\n      console.log(\"User not found.\");\n      return [];\n    }\n    const userIndex = userToIdx[userId];\n    const predictedResiduals = np.dot(userLatent[userIndex], itemLatent.T);\n    const userB = userBias[userId] || 0.0;\n    const recommendations = productIds.map(prod => {\n      const itemBiasVal = itemBias[prod] || 0.0;\n      const predictedRating = globalMean + userB + itemBiasVal + predictedResiduals[productToIdx[prod]];\n      return {\n        product_id: prod,\n        predicted_rating\n      };\n    });\n\n    // Remove products the user already rated\n    const ratedProducts = ratingsDf.filter(row => row.user_id === userId).map(row => row.product_id);\n    const filteredRecs = recommendations.filter(rec => !ratedProducts.includes(rec.product_id));\n\n    // Sort recommendations by predicted rating in descending order\n    filteredRecs.sort((a, b) => b.predicted_rating - a.predicted_rating);\n    return filteredRecs.slice(0, top_n);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!userId) return;\n\n    // Call SVD-based recommendation function here\n    const recommendations = getRecommendationsSVD(userId, userToIdx, Object.keys(productToIdx), ratingsData, userLatent, itemLatent, 10);\n\n    // Debug: Print recommendations to console\n    console.log(\"Generated Recommendations for User:\", recommendations);\n\n    // If there are no recommendations, you can handle the case here\n    if (recommendations.length === 0) {\n      console.log(\"No recommendations found for this user.\");\n    }\n\n    // Use the recommendations to update graph data\n    const data = generateGraphData(recommendations, levels);\n    setGraphData(data);\n    setSelectedNode(null);\n  };\n\n  // Example mock function to generate graph data\n  function generateGraphData(recommendations, levels) {\n    const nodes = [];\n    const edges = [];\n\n    // Level 0: User node\n    const userNodeId = `user-${userId}`;\n    nodes.push({\n      id: userNodeId,\n      label: `User ${userId}`,\n      level: 0\n    });\n    recommendations.forEach(rec => {\n      const productNodeId = rec.product_id;\n      nodes.push({\n        id: productNodeId,\n        label: `${productNodeId} (Recommended)`,\n        level: 1\n      });\n      edges.push({\n        source: userNodeId,\n        target: productNodeId\n      });\n\n      // Level 2: Similar items for each recommended product\n      if (levels > 1) {\n        const simItems = [`${productNodeId}-Sim1`, `${productNodeId}-Sim2`];\n        simItems.forEach(sim => {\n          nodes.push({\n            id: sim,\n            label: sim,\n            level: 2\n          });\n          edges.push({\n            source: productNodeId,\n            target: sim\n          });\n        });\n      }\n    });\n    return {\n      nodes,\n      edges\n    };\n  }\n  const handleNodeClick = React.useCallback(nodeId => {\n    setSelectedNode(nodeId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interactive Recommendation Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"userId\",\n        children: \"User ID: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"userId\",\n        type: \"text\",\n        value: userId,\n        onChange: e => setUserId(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"levels\",\n        children: \" # of levels: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"levels\",\n        type: \"number\",\n        min: \"1\",\n        value: levels,\n        onChange: e => setLevels(Number(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Generate Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-section\",\n      children: /*#__PURE__*/_jsxDEV(GrapherWrapper, {\n        nodes: graphData.nodes,\n        edges: graphData.edges,\n        onNodeClick: handleNodeClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"detail-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Node Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You clicked on: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: selectedNode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lIW9z2yy7DGJMU7vNovS6Sp6+GU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Papa","GrapherWrapper","jsxDEV","_jsxDEV","loadCSVData","csvFilePath","Promise","resolve","reject","parse","download","complete","result","data","error","App","_s","userId","setUserId","levels","setLevels","graphData","setGraphData","nodes","edges","selectedNode","setSelectedNode","ratingsData","setRatingsData","userBias","setUserBias","itemBias","setItemBias","globalMean","setGlobalMean","userLatent","setUserLatent","itemLatent","setItemLatent","userToIdx","setUserToIdx","productToIdx","setProductToIdx","then","processRatingsData","catch","console","ratingsDf","userIds","Set","map","row","user_id","productIds","product_id","log","Object","fromEntries","user","i","prod","reduce","acc","parseFloat","rating","length","userItemSparse","forEach","userIdx","productIdx","push","ratingResidual","applySVD","nFactors","svd","window","SVD","fit_transform","components_","T","getRecommendationsSVD","top_n","userIndex","predictedResiduals","np","dot","userB","recommendations","itemBiasVal","predictedRating","predicted_rating","ratedProducts","filter","filteredRecs","rec","includes","sort","a","b","slice","handleSubmit","e","preventDefault","keys","generateGraphData","userNodeId","id","label","level","productNodeId","source","target","simItems","sim","handleNodeClick","useCallback","nodeId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","value","onChange","required","min","Number","onNodeClick","_c","$RefreshReg$"],"sources":["/Users/rohit/College/Spring2025/CSE6242/RecomViz/basic visualization/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\"; // Add this import\nimport GrapherWrapper from \"./GrapherWrapper\";\nimport \"./App.css\";\n\n// Helper function to load CSV data\nconst loadCSVData = (csvFilePath) => {\n  return new Promise((resolve, reject) => {\n    Papa.parse(csvFilePath, {\n      download: true,\n      complete: (result) => {\n        resolve(result.data);\n      },\n      error: (error) => reject(error),\n    });\n  });\n};\n\nfunction App() {\n  const [userId, setUserId] = useState(\"\");\n  const [levels, setLevels] = useState(1);\n  const [graphData, setGraphData] = useState({ nodes: [], edges: [] });\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [ratingsData, setRatingsData] = useState([]);\n  const [userBias, setUserBias] = useState({});\n  const [itemBias, setItemBias] = useState({});\n  const [globalMean, setGlobalMean] = useState(0);\n  const [userLatent, setUserLatent] = useState([]);\n  const [itemLatent, setItemLatent] = useState([]);\n  const [userToIdx, setUserToIdx] = useState({});\n  const [productToIdx, setProductToIdx] = useState({});\n  \n  useEffect(() => {\n    // Load CSV when the component mounts\n    loadCSVData(\"/data/sample_user_ratings.csv\")\n      .then((data) => {\n        setRatingsData(data);\n        // Process CSV data\n        processRatingsData(data);\n      })\n      .catch((error) => console.error(\"Error loading CSV:\", error));\n  }, []);\n\n  const processRatingsData = (data) => {\n    // Parse and prepare the data as needed\n    const ratingsDf = data;\n    const userIds = [...new Set(ratingsDf.map((row) => row.user_id))];\n    const productIds = [...new Set(ratingsDf.map((row) => row.product_id))];\n\n    console.log(\"Unique User IDs:\", userIds);\n    console.log(\"Unique Product IDs:\", productIds);\n\n    const userToIdx = Object.fromEntries(userIds.map((user, i) => [user, i]));\n    const productToIdx = Object.fromEntries(productIds.map((prod, i) => [prod, i]));\n\n    // Compute Global Mean, Biases, and Residual Matrix\n    const globalMean = ratingsDf.reduce((acc, row) => acc + parseFloat(row.rating), 0) / ratingsDf.length;\n    setGlobalMean(globalMean);\n\n    const userBias = ratingsDf.reduce((acc, row) => {\n      acc[row.user_id] = acc[row.user_id] || 0;\n      acc[row.user_id] += parseFloat(row.rating);\n      return acc;\n    }, {});\n    setUserBias(userBias);\n\n    const itemBias = {}; // Compute item biases (similar to userBias logic)\n    setItemBias(itemBias);\n\n    // Compute user-item matrix\n    const userItemSparse = [];\n    ratingsDf.forEach((row) => {\n      const userIdx = userToIdx[row.user_id];\n      const productIdx = productToIdx[row.product_id];\n      userItemSparse.push({\n        userIdx,\n        productIdx,\n        ratingResidual: parseFloat(row.rating) - globalMean, // example residual\n      });\n    });\n\n    // Apply SVD\n    applySVD(userItemSparse, userIds, productIds);\n  };\n\n  // SVD Logic\n  const applySVD = (userItemSparse, userIds, productIds) => {\n    const nFactors = 20; // You can tune this value\n    const svd = new window.SVD(nFactors); // Use your SVD implementation or a library\n\n    // Perform SVD (simplified, adjust based on actual SVD library)\n    const userLatent = svd.fit_transform(userItemSparse);\n    const itemLatent = svd.components_.T;\n\n    setUserLatent(userLatent);\n    setItemLatent(itemLatent);\n    setUserToIdx(userToIdx);\n    setProductToIdx(productToIdx);\n  };\n\n  const getRecommendationsSVD = (userId, userToIdx, productIds, ratingsDf, \n                                  userLatent, itemLatent, top_n = 10) => {\n    if (!(userId in userToIdx)) {\n      console.log(\"User not found.\");\n      return [];\n    }\n\n    const userIndex = userToIdx[userId];\n    const predictedResiduals = np.dot(userLatent[userIndex], itemLatent.T);\n\n    const userB = userBias[userId] || 0.0;\n\n    const recommendations = productIds.map((prod) => {\n      const itemBiasVal = itemBias[prod] || 0.0;\n      const predictedRating = globalMean + userB + itemBiasVal + predictedResiduals[productToIdx[prod]];\n      return { product_id: prod, predicted_rating };\n    });\n\n    // Remove products the user already rated\n    const ratedProducts = ratingsDf.filter((row) => row.user_id === userId).map((row) => row.product_id);\n    const filteredRecs = recommendations.filter((rec) => !ratedProducts.includes(rec.product_id));\n    \n    // Sort recommendations by predicted rating in descending order\n    filteredRecs.sort((a, b) => b.predicted_rating - a.predicted_rating);\n    \n    return filteredRecs.slice(0, top_n);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!userId) return;\n  \n    // Call SVD-based recommendation function here\n    const recommendations = getRecommendationsSVD(\n      userId, userToIdx, Object.keys(productToIdx), ratingsData, \n      userLatent, itemLatent, 10\n    );\n  \n    // Debug: Print recommendations to console\n    console.log(\"Generated Recommendations for User:\", recommendations);\n  \n    // If there are no recommendations, you can handle the case here\n    if (recommendations.length === 0) {\n      console.log(\"No recommendations found for this user.\");\n    }\n  \n    // Use the recommendations to update graph data\n    const data = generateGraphData(recommendations, levels);\n    setGraphData(data);\n    setSelectedNode(null);\n  };  \n\n  // Example mock function to generate graph data\n  function generateGraphData(recommendations, levels) {\n    const nodes = [];\n    const edges = [];\n\n    // Level 0: User node\n    const userNodeId = `user-${userId}`;\n    nodes.push({ id: userNodeId, label: `User ${userId}`, level: 0 });\n\n    recommendations.forEach((rec) => {\n      const productNodeId = rec.product_id;\n      nodes.push({ id: productNodeId, label: `${productNodeId} (Recommended)`, level: 1 });\n      edges.push({ source: userNodeId, target: productNodeId });\n\n      // Level 2: Similar items for each recommended product\n      if (levels > 1) {\n        const simItems = [`${productNodeId}-Sim1`, `${productNodeId}-Sim2`];\n        simItems.forEach((sim) => {\n          nodes.push({ id: sim, label: sim, level: 2 });\n          edges.push({ source: productNodeId, target: sim });\n        });\n      }\n    });\n\n    return { nodes, edges };\n  }\n\n  const handleNodeClick = React.useCallback((nodeId) => {\n    setSelectedNode(nodeId);\n  }, []);\n\n  return (\n    <div className=\"app-container\">\n      <h1>Interactive Recommendation Graph</h1>\n\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"userId\">User ID: </label>\n        <input\n          id=\"userId\"\n          type=\"text\"\n          value={userId}\n          onChange={(e) => setUserId(e.target.value)}\n          required\n        />\n\n        <label htmlFor=\"levels\"> # of levels: </label>\n        <input\n          id=\"levels\"\n          type=\"number\"\n          min=\"1\"\n          value={levels}\n          onChange={(e) => setLevels(Number(e.target.value))}\n        />\n\n        <button type=\"submit\">Generate Graph</button>\n      </form>\n\n      <div className=\"graph-section\">\n        <GrapherWrapper\n          nodes={graphData.nodes}\n          edges={graphData.edges}\n          onNodeClick={handleNodeClick}\n        />\n      </div>\n\n      {selectedNode && (\n        <div className=\"detail-section\">\n          <h2>Node Details</h2>\n          <p>You clicked on: <strong>{selectedNode}</strong></p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}